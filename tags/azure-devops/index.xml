<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure DevOps on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/azure-devops/</link><description>Recent content in Azure DevOps on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/azure-devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure DevOps Pipeline Template Job Names and single quotes</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/azure-devops-pipeline-template-job-names-and-single-quotes/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/azure-devops-pipeline-template-job-names-and-single-quotes/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2021/Bicep/xavier-von-erlach-ooR1jY2yFr4-unsplash.jpg" alt="Featured image of post Azure DevOps Pipeline Template Job Names and single quotes" />&lt;h1 id="the-job-name-deploy_function_app-appears-more-than-once">The job name Deploy_Function_App appears more than once&lt;/h1>
&lt;p>This was the error I was notified about in a Azure DevOps pipeline when they tried to run it. The error message continued to say that Job Names must be unique within a pipeline.&lt;/p>
&lt;h2 id="set-up">Set Up&lt;/h2>
&lt;p>There is a centralised repository of Azure DevOps Pipeline Template Jobs that call the Bicep modules with the required values in the same repo to deploy Azure Infrastructure.&lt;/p>
&lt;p>The error was received in the pipeline that was created to make use of these template jobs and deploy a whole projects worth of infrastructure.&lt;/p>
&lt;p>It looked like this&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2022/01/bemoreuniquenames.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2022/01/uniquenames.png"
loading="lazy"
alt="unique"
>&lt;/a>&lt;/p>
&lt;p>When I looked at the template job it had&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - job: Deploy_Function_App
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ${{ if eq(parameters[&amp;#39;dependsOnLogAnalytics&amp;#39;], true) }}:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dependsOn:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Resource_Group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Log_Analytics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ${{ if eq(parameters[&amp;#39;dependsOnLogAnalytics&amp;#39;], false) }}:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dependsOn:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Resource_Group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vmImage: windows-latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="so-you-fixed-it">So you fixed it?&lt;/h2>
&lt;p>I can see that the job name will always be &lt;code>Deploy_Function_App&lt;/code> so I just need to paramatarise it. For this example, I am going to say it was a parameter called suffix, and the code looked like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - job: Deploy_Function_App${{ parameters.suffix }}&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ${{ if eq(parameters[&amp;#39;dependsOnLogAnalytics&amp;#39;], true) }}:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dependsOn:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Resource_Group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Log_Analytics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ${{ if eq(parameters[&amp;#39;dependsOnLogAnalytics&amp;#39;], false) }}:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dependsOn:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - Deploy_Resource_Group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vmImage: windows-latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>A quick Pull Request, which was approved and then pushed and I said &amp;ldquo;Hey, all fixed, try again&amp;rdquo;. This is the response I got - It failed again&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2022/01/bemoreuniquenames.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2022/01/uniquenames.png"
loading="lazy"
alt="unique"
>&lt;/a>&lt;/p>
&lt;p>Job Deploy_Function_App_speechtotext&amp;rsquo; has an invalid name. Valid names may only contain alphanumeric characters and &amp;lsquo;_&amp;rsquo; and may not start with a number.&lt;/p>
&lt;p>I had to look at it for a few minutes before I spotted the error! The job name sure looks like it only has alphanumeric characters and my YAML is perfectly valid so the string must be properly quoted. I mean it must be properly quoted otherwise it would fail right?&lt;/p>
&lt;p>Wrong&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> - job: Deploy_Function_App${{ parameters.suffix }}&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>There is only one single quote here which we did not notice!&lt;/p>
&lt;p>Altering it to this worked.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> - job: &amp;#39;Deploy_Function_App${{ parameters.suffix }}&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hopefully that might help someone. (No doubt I will find this in a search in a few months time when I do it again!!)&lt;/p>
&lt;p>Happy automating&lt;/p></description></item><item><title>What does JS_InvalidFilePath error mean in Azure DevOps?</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/what-does-js_invalidfilepath-error-mean-in-azure-devops/</link><pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/what-does-js_invalidfilepath-error-mean-in-azure-devops/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2021/Bicep/xavier-von-erlach-ooR1jY2yFr4-unsplash.jpg" alt="Featured image of post What does JS_InvalidFilePath error mean in Azure DevOps? " />&lt;h1 id="cant-find-loc-string-for-key-js_invalidfilepath">Can't find loc string for key: JS_InvalidFilePath&lt;/h1>
&lt;p>This was the error I received in my Azure DevOps pipeline when I tried to run it.&lt;/p>
&lt;p>When I investigated further it said&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">##[debug]workingDirectory=/home/vsts/work/1/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[debug]check path : /home/vsts/work/1/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[warning]Can\&amp;#39;t find loc string for key: JS_InvalidFilePath
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[debug]Processed: ##vso[task.issue type=warning;]Can\&amp;#39;t find loc string for key: JS_InvalidFilePath
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[debug]task result: Failed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[error]JS_InvalidFilePath /home/vsts/work/1/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[debug]Processed: ##vso[task.issue type=error;]JS_InvalidFilePath /home/vsts/work/1/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##[debug]Processed: ##vso[task.complete result=Failed;]JS_InvalidFilePath /home/vsts/work/1/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="what-is-going-on">What is going on?&lt;/h1>
&lt;p>I was trying to run a simple Azure PowerShell task and had defined it like this (I used VS Code with the Azure Pipelines extension and made use of the intellisense). I had defined it like this.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> - task: AzurePowerShell@5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> displayName: Deploy from cache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> azureSubscription: &amp;#39;azurePAYGconnection&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Inline: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $date = Get-Date -Format yyyyMMddHHmmsss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $deploymentname = &amp;#39;deploy_testRg_{0}&amp;#39; -f $date # name of the deployment seen in the activity log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $TemplateFile = &amp;#39;BicepFiles\Deployments\TheTestResourceGroup.bicep&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> New-AzDeployment -Name $deploymentname -Location uksouth -TemplateFile $TemplateFile -Verbose # -WhatIf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> azurePowerShellVersion: &amp;#39;LatestVersion&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SYSTEM_ACCESSTOKEN: $(system.accesstoken)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pwsh: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which gave me no errors, the YAML is correct (yes, I was suprised too!). The Azure Pipeline definition does not raise an error either in VS Code or in Azure DevOps.&lt;/p>
&lt;h1 id="what-was-missing">What was missing?&lt;/h1>
&lt;p>I had not put &lt;code>ScriptType: 'InlineScript'&lt;/code> and this is what caused that odd error.&lt;/p>
&lt;p>The correct definition was&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> - task: AzurePowerShell@5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> displayName: Deploy from cache
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> inputs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> azureSubscription: &amp;#39;azurePAYGconnection&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ScriptType: &amp;#39;InlineScript&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Inline: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $date = Get-Date -Format yyyyMMddHHmmsss
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $deploymentname = &amp;#39;deploy_testRg_{0}&amp;#39; -f $date # name of the deployment seen in the activity log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $TemplateFile = &amp;#39;BicepFiles\Deployments\TheTestResourceGroup.bicep&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> New-AzDeployment -Name $deploymentname -Location uksouth -TemplateFile $TemplateFile -Verbose # -WhatIf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> azurePowerShellVersion: &amp;#39;LatestVersion&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SYSTEM_ACCESSTOKEN: $(system.accesstoken)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pwsh: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enabled: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hopefully that might help someone. (No doubt I will find this in a search in a few months time when I do it again!!)&lt;/p>
&lt;p>Happy automating&lt;/p></description></item><item><title>When you REALLY want to see your Azure DevOps Secret Variable Values</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/when-you-really-want-to-see-your-azure-devops-secret-variable-values/</link><pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/when-you-really-want-to-see-your-azure-devops-secret-variable-values/</guid><description>&lt;img src="https://blog.robsewell.com/assets/uploads/2021/michael-dziedzic-1bjsASjhfkE-unsplash.jpg" alt="Featured image of post When you REALLY want to see your Azure DevOps Secret Variable Values" />&lt;h1 id="i-really-needed-to-see-the-values">I REALLY needed to see the values&lt;/h1>
&lt;p>The problem was that I had code in an Azure DevOps PowerShell task which was using a Service Principal to do some things in Azure and it was failing.&lt;/p>
&lt;p>The pipeline had some things a little like this, it got a number of values from a key vault, set them to variables and used them in a custom function&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$somevalue = (Get-AzKeyVaultSecret -vaultName $KeyVaultName -name &amp;#39;AGeneratedName&amp;#39;).SecretValue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$somecredential = New-Object System.Management.Automation.PSCredential (&amp;#39;dummy&amp;#39;, $somevalue )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$something = $somecredential.GetNetworkCredential().Password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Do-SomethingSpecial -MyThing $something
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I was getting an error saying &amp;ldquo;forbidden - *** does not have access&amp;rdquo; or similar&lt;/p>
&lt;p>Thing is, I knew that &lt;code>$something&lt;/code> did have access as I could run the same code from my workstation and it did the logging in for &lt;code>$something&lt;/code> so the error must be in the values that I was passing into the function. (there were more values than this but that is not important)&lt;/p>
&lt;p>All I needed to do was to see what values had been passed to the function and I could resolve this little issue. But these were secret variables. Helpfully kept out of the logs by Azure DevOps hence the *** so what to do?&lt;/p>
&lt;p>I thought - I know what I will do, I will write the Parameter values from the function out as Verbose, call the function with &lt;code>-Verbose&lt;/code> and then delete the run to clear up the logs.&lt;/p>
&lt;p>I added&lt;/p>
&lt;p>&lt;code>Write-Verbose ($PSBoundParameters | Out-String)&lt;/code>&lt;/p>
&lt;p>to my function, called it with verbose in the pipeline and got&lt;/p>
&lt;blockquote>
&lt;p>Name       Value&lt;br>
- -         - -&lt;br>
MyThing       ***&lt;/p>
&lt;/blockquote>
&lt;p>Awesome.&lt;/p>
&lt;p>Write it to a file and read it back. This is a tactic that you can read about that works but it puts the secrets on disk on the agent and I did not want to do that.&lt;/p>
&lt;p>I thought I would be even cleverer and this time I added to my function&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$WhatsMyThing = $MyThing + &amp;#39;-1&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Write-Verbose &amp;#34;My thing is $WhatsMyThing&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Thats bound to work.&lt;/p>
&lt;p>My how I laughed when in the logs I had&lt;/p>
&lt;blockquote>
&lt;p>My Thing is  ***-1&lt;/p>
&lt;/blockquote>
&lt;p>Right. I thought.&lt;/p>
&lt;p>This IS IT.&lt;/p>
&lt;p>I WILL SHOW YOU AZURE DEVOPS&lt;/p>
&lt;p>I added to my function&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$WhatsMyThing =[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($$MyThing ))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Write-Verbose &amp;#34;My thing is $WhatsMyThing&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This converted the value of MyThing into a base64 encoded value which I could see in the logs.&lt;/p>
&lt;blockquote>
&lt;p>My Thing is VGhlIEJlYXJkIGlzIExhdWdoaW5nIGF0IHlvdS4gWW91IHRoaW5rIEkgd291bGQgcHV0IHNvbWV0aGluZyByZWFsIGluIGhlcmU/IEdvb2QgdHJ5Lg==&lt;/p>
&lt;/blockquote>
&lt;p>and then I could decode it on my workstation with&lt;/p>
&lt;p>&lt;code>[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('ValueFromLogs'))&lt;/code>&lt;/p>
&lt;p>and learn that despite two people looking at the values we couldnt tell the difference between AGeneratedName and AnotherGeneratedName and they were the wrong way around!!!!&lt;/p>
&lt;p>But at least I know now a good way to get those secret values.&lt;/p>
&lt;p>If you do this, dont forget to delete the pipeline run from Azure DevOps so that the encoded value is not left in the logs for anyone to read.&lt;/p>
&lt;p>Every day is a learning day.&lt;/p></description></item><item><title>Using Azure DevOps Build Pipeline Templates with Terraform to build an AKS cluster</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/</link><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2019/04/image-151.png" alt="Featured image of post Using Azure DevOps Build Pipeline Templates with Terraform to build an AKS cluster" />&lt;p>In the last few posts I have moved from &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>building an Azure SQL DB with Terraform using VS Code&lt;/a> to &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>automating the build process for the Azure SQL DB using Azure DevOps Build Pipelines&lt;/a> to &lt;a class="link" href="https://blog.robsewell.com/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups/" target="_blank" rel="noopener"
>using Task Groups in Azure DevOps to reuse the same Build Process and build an Azure Linux SQL VM and Network Security Group&lt;/a>. This evolution is fantastic but Task Groups can only be used in the same Azure DevOps repository. It would be brilliant if I could use Configuration as Code for the Azure Build Pipeline and store that in a separate source control repository which can be used from any Azure DevOps Project.&lt;/p>
&lt;p>Luckily, you can 😉 You can use &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>Azure DevOps Job Templates&lt;/a> to achieve this. There is a limitation at present, you can only use them for Build Pipelines and not Release Pipelines.&lt;/p>
&lt;p>The aim of this little blog series was to have a single Build Pipeline stored as code which I can use to build any infrastructure that I want with Terraform in Azure and be able to use it anywhere&lt;/p>
&lt;h2 id="creating-a-build-pipeline-template">Creating a Build Pipeline Template&lt;/h2>
&lt;p>I created a &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-BuildTemplates" target="_blank" rel="noopener"
>GitHub repository&lt;/a> to hold my Build Templates, feel free to use them as a base for your own but please don’t try and use the repo for your own builds.&lt;/p>
&lt;p>The easiest way to create a Build Template is to already have a Build Pipeline. This cannot be done from a Task Group but I still have the Build Pipeline from my &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>automating the build process for the Azure SQL DB using Azure DevOps Build Pipelines&lt;/a> blog post.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-132.png"
loading="lazy"
>&lt;/p>
&lt;p>There is a View YAML button. I can click this to view the YAML definition of the Build Pipeline&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-133.png"
loading="lazy"
>&lt;/p>
&lt;p>I copy that and paste it into a new file in my BuildTemplates repository. (I have replaced my Azure Subscription information in the public repository)&lt;/p>
&lt;pre>&lt;code> jobs:
- job: Build
pool:
name: Hosted VS2017
demands: azureps
steps:
- task: AzureCLI@1
displayName: 'Azure CLI to deploy azure storage for backend'
inputs:
azureSubscription: 'PUTYOURAZURESUBNAMEHERE'
scriptLocation: inlineScript
inlineScript: |
# the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
call az group create --location $(location) --name $(TerraformStorageRG)
call az storage account create --name $(TerraformStorageAccount) --resource-group $(TerraformStorageRG) --location $(location) --sku Standard_LRS
call az storage container create --name terraform --account-name $(TerraformStorageAccount)
- task: AzurePowerShell@3
displayName: 'Azure PowerShell script to get the storage key'
inputs:
azureSubscription: 'PUTYOURAZURESUBNAMEHERE'
ScriptType: InlineScript
Inline: |
# Using this script we will fetch storage key which is required in terraform file to authenticate backend stoarge account
$key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(TerraformStorageRG) -AccountName $(TerraformStorageAccount)).Value[0]
Write-Host &amp;quot;##vso[task.setvariable variable=TerraformStorageKey]$key&amp;quot;
azurePowerShellVersion: LatestVersion
- task: qetza.replacetokens.replacetokens-task.replacetokens@3
displayName: 'Replace tokens in terraform file'
inputs:
rootDirectory: Build
targetFiles: |
**/*.tf
**/*.tfvars
tokenPrefix: '__'
tokenSuffix: '__'
- powershell: |
Get-ChildItem .\Build -Recurse
Get-Content .\Build\*.tf
Get-Content .\Build\*.tfvars
Get-ChildItem Env: | select Name
displayName: 'Check values in files'
enabled: false
- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
displayName: 'Initialise Terraform'
inputs:
TemplatePath: Build
Arguments: 'init -backend-config=&amp;quot;0-backend-config.tfvars&amp;quot;'
InstallTerraform: true
UseAzureSub: true
ConnectedServiceNameARM: 'PUTYOURAZURESUBNAMEHERE'
- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
displayName: 'Plan Terraform execution'
inputs:
TemplatePath: Build
Arguments: plan
InstallTerraform: true
UseAzureSub: true
ConnectedServiceNameARM: 'PUTYOURAZURESUBNAMEHERE'
- task: petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform.Xpirit-Vsts-Release-Terraform.Terraform@2
displayName: 'Apply Terraform'
inputs:
TemplatePath: Build
Arguments: 'apply -auto-approve'
InstallTerraform: true
UseAzureSub: true
ConnectedServiceNameARM: 'PUTYOURAZURESUBNAMEHERE'
&lt;/code>&lt;/pre>
&lt;p>Now I can use this yaml as configuration as code for my Build Pipeline 🙂 It can be used from any Azure DevOps project. Once you start looking at the code and the &lt;a class="link" href="https://docs.microsoft.com/en-gb/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;tabs=schema?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>documentation for the yaml&lt;/a> schema you can begin to write your pipelines as YAML, but sometimes it is easier to just create build pipeline or even just a job step in the browser and click the view yaml button!&lt;/p>
&lt;h2 id="create-an-aks-cluster-with-a-sql-2019-container-using-terraform-and-build-templates">Create an AKS Cluster with a SQL 2019 container using Terraform and Build templates&lt;/h2>
&lt;p>I have a &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AKS" target="_blank" rel="noopener"
>GitHub Repository with the Terraform code to build a simple AKS cluster&lt;/a>. This could not have been achieved without &lt;a class="link" href="https://azurecitadel.com/automation/terraform/lab8/" target="_blank" rel="noopener"
>Richard Cheney’s article&lt;/a> I am not going to explain how it all works for this blog post or some of the negatives of doing it this way. Instead lets build an Azure DevOps Build Pipeline to build it with Terraform using Configuration as Code (the yaml file)&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-134.png"
loading="lazy"
>&lt;/p>
&lt;p>I am going to create a new Azure DevOps Build Pipeline and as in the previous posts connect it to the &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AKS" target="_blank" rel="noopener"
>GitHub Repository holding the Terraform code&lt;/a>.&lt;/p>
&lt;p>This time I am going to choose the Configuration as code template&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-135.png"
loading="lazy"
>&lt;/p>
&lt;p>I am going to give it a name and it will show me that it needs the path to the yaml file containing the build definition in the current repository.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-136.png"
loading="lazy"
>&lt;/p>
&lt;p>Clicking the 3 ellipses will pop-up a file chooser and I pick the build.yaml file&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-137.png"
loading="lazy"
>&lt;/p>
&lt;p>The build.yaml file looks like this. The name is the USER/Repository Name and the endpoint is the name of the endpoint for the GitHub service connection in Azure DevOps. The template value is the name of the build yaml file @ the name given for the repository value.&lt;/p>
&lt;pre>&lt;code> resources:
repositories:
- repository: templates
type: GitHub
name: SQLDBAWithABeard/Presentations-BuildTemplates-Private
endpoint: SQLDBAWithABeardGitHub
jobs:
- template: AzureTerraform.yaml@templates # Template reference
&lt;/code>&lt;/pre>
&lt;p>You can find (and change) your GitHub service connection name by clicking on the cog bottom left in Azure DevOps and clicking service connections&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-140.png"
loading="lazy"
>&lt;/p>
&lt;p>I still need to create my variables for my Terraform template (perhaps I can now just leave those in my code?) For the AKS Cluster build right now I have to add presentation, location, ResourceGroupName, AgentPoolName, ServiceName, VMSize, agent_count&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-139.png"
loading="lazy"
>&lt;/p>
&lt;p>Then I click save and queue and the job starts running&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-141.png"
loading="lazy"
>&lt;/p>
&lt;p>If I want to edit the pipeline it looks a little different&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-152.png"
loading="lazy"
>&lt;/p>
&lt;p>The variables and triggers can be found under the 3 ellipses on the top right&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-153.png"
loading="lazy"
>&lt;/p>
&lt;p>It also defaults the trigger to automatic deployment.&lt;/p>
&lt;p>It takes a bit longer to build&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-142.png"
loading="lazy"
>&lt;/p>
&lt;p>and when I get the Terraform code wrong and the build fails, I can just alter the code, commit it, push and a new build will start and the Terraform will work out what is built and what needs to be built!&lt;/p>
&lt;p>but eventually the job finishes successfully&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-143.png"
loading="lazy"
>&lt;/p>
&lt;p>and the resources are built&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-144.png"
loading="lazy"
>&lt;/p>
&lt;p>and in Visual Studio Code with the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-kubernetes-tools.vscode-kubernetes-tools" target="_blank" rel="noopener"
>Kubernetes extension&lt;/a> installed I can connect to the cluster by clicking the 3 ellipses and Add Existing Cluster&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-145.png"
loading="lazy"
>&lt;/p>
&lt;p>I choose Azure Kubernetes Services and click next&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-146.png"
loading="lazy"
>&lt;/p>
&lt;p>Choose my subscription and then add the cluster&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-147.png"
loading="lazy"
>&lt;/p>
&lt;p>and then I can explore my cluster&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-148.png"
loading="lazy"
>&lt;/p>
&lt;p>I can also see the dashboard by right clicking on the cluster name and Open Dashboard&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-150.png"
loading="lazy"
>&lt;/p>
&lt;p>Right clicking on the service name and choosing describe&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-149.png"
loading="lazy"
>&lt;/p>
&lt;p>shows the external IP address, which I can put into Azure Data Studio and connect to my container&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-151.png"
loading="lazy"
>&lt;/p>
&lt;p>So I now I can source control my Build Job Steps and hold them in a central repository. I can make use of them in any project. This gives me much more control and saves me from repeating myself repeating myself. The disadvantage is that there is no handy warning when I change the underlying Build Repository that I will be affecting other Build Pipelines and there is no easy method to see which Build Pipelines are dependent on the build yaml file&lt;/p>
&lt;p>Happy Automating&lt;/p></description></item><item><title>Using the same Azure DevOps build steps for Terraform with different Pipelines with Task Groups to build an Azure Linux SQL VM</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups-to-build-an-azure-linux-sql-vm/</link><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups-to-build-an-azure-linux-sql-vm/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2019/04/image-107.png" alt="Featured image of post Using the same Azure DevOps build steps for Terraform with different Pipelines with Task Groups to build an Azure Linux SQL VM" />&lt;p>In my &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>last post&lt;/a> I showed how to build an Azure DevOps Pipeline for a Terraform build of an Azure SQLDB. This will take the terraform code and build the required infrastructure.&lt;/p>
&lt;p>The plan all along has been to enable me to build &lt;em>different&lt;/em> environments depending on the requirement. Obviously I can repeat the steps from the last post for a new repository containing a Terraform code for a different environment but&lt;/p>
&lt;blockquote>
&lt;p>If you are going to do something more than once Automate It&lt;/p>
&lt;p>who first said this? Anyone know?&lt;/p>
&lt;/blockquote>
&lt;p>The build steps for building the Terraform are the same each time (if I keep a standard folder and naming structure) so it would be much more beneficial if I could keep them in a single place and any alterations to the process only need to be made in the one place 🙂&lt;/p>
&lt;h2 id="task-groups">Task Groups&lt;/h2>
&lt;p>Azure DevOps has task groups. On &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>the Microsoft Docs web-page&lt;/a> they are described as&lt;/p>
&lt;blockquote>
&lt;p>A &lt;em>task group&lt;/em> allows you to encapsulate a sequence of tasks, already defined in a build or a release pipeline, into a single reusable task that can be added to a build or release pipeline, just like any other tas&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>If you are doing this with a more complicated existing build pipeline it is important that &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/task-groups?view=azure-devops?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>you read the Before You Create A Task Group on the docs pag&lt;/a>e. This will save you time when trying to understand why variables are not available (Another grey hair on my beard!)&lt;/p>
&lt;h2 id="creating-a-task-group">Creating A Task Group&lt;/h2>
&lt;p>Here’s the thing, creating a task group is so easy it should be the default way you create Azure DevOps Pipelines. Let me walk you through it&lt;/p>
&lt;p>I will use the Build Pipeline from the previous post. Click edit from the build page&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-92.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-92.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Then CTRL and click to select all of the steps&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-93.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-93.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Right Click and theres a Create Task Group button to click !&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-94.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-94.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can see that it has helpfully added the values for the parameters it requires for the location, Storage Account and the Resource Group.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-95.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-95.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Remember the grey beard hair above? We need to change those values to use the variables that we will add to the Build Pipeline using&lt;/p>
&lt;pre>&lt;code>$(VariableName)
&lt;/code>&lt;/pre>
&lt;p>Once you have done that click Create&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-96.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-96.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>This will also alter the current Build Pipeline to use the Task Group. Now we have a Task Group that we can use in any build pipeline in this project.&lt;/p>
&lt;h2 id="using-the-task-group-with-a-new-build-pipeline-to-build-an-azure-linux-sql-vm">Using the Task Group with a new Build Pipeline to build an Azure Linux SQL VM&lt;/h2>
&lt;p>Lets re-use the build steps to create an Azure SQL Linux VM. First I created a &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AzureSQLVM" target="_blank" rel="noopener"
>new GitHub Repository&lt;/a> for my Terraform code. Using the docs I created the Terraform to create a resource group, a Linux SQL VM, a virtual network, a subnet, a NIC for the VM, a public IP for the VM, a network security group with two rules, one for SQL and one for SSH. It will look like this&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-114.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-114.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The next step is to choose the repository&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-98.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-98.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>again we are going to select Empty job (although the next post will be about the Configuration as Code 🙂&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-99.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-99.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>As before&lt;/a> we will name the Build Pipeline and the Agent Job Step and click the + to add a new task. This time we will search for the Task Group name that we created&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-100.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-100.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I need to add in the variables from the variable.tf in the code and also for the Task Group&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-117.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-117.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and when I click save and queue&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-102.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-102.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>It runs for less than 7 minutes&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-118.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-118.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and when I look in the Azure portal&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-119.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-119.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and I can connect in Azure Data Studio&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-129.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-129.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="altering-the-task-group">Altering The Task Group&lt;/h2>
&lt;p>You can find the Task Groups under Pipelines in your Azure DevOps project&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-97.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-97.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Click on the Task Group that you have created and then you can alter, edit it if required and click save&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-107.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-107.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>This will warn you that any changes will affect all pipelines and task groups that are using this task group. To find out what will be affected click on references&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-108.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-108.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>which will show you what will be affected.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-109.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-109.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Now I can run the same build steps for any Build Pipeline and alter them all in a single place using Task Groups simplifying the administration of the Build Pipelines.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/" target="_blank" rel="noopener"
>The next post will show how to use Azure DevOps templates to use the same build steps across many projects and build pipelines and will build a simple AKS cluster&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>The first post showed how to build an Azure SQLDB with Terraform using VS Code&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups/" target="_blank" rel="noopener"
>The second post showed how to use Azure DevOps Task Groups to use the same build steps in multiple pipelines and build an Azure Linux SQL Server VM&lt;/a>&lt;/p>
&lt;p>Happy Automating!&lt;/p></description></item><item><title>Building Azure SQL Db with Terraform using Azure DevOps</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-using-azure-devops/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-using-azure-devops/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2019/04/image-49.png" alt="Featured image of post Building Azure SQL Db with Terraform using Azure DevOps" />&lt;p>In &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>my last post&lt;/a> I showed how to create a Resource Group and an Azure SQL Database with Terraform using Visual Studio Code to deploy.&lt;/p>
&lt;p>Of course, I haven&amp;rsquo;t stopped there, who wants to manually run code to create things. There was a lot of install this and set up that. I would rather give the code to a build system and get it to run it. I can then even set it to automatically deploy new infrastructure when I commit some code to alter the configuration.&lt;/p>
&lt;p>This scenario though is to build environments for presentations. Last time I created an Azure SQL DB and tagged it with DataInDevon (By the way you can get tickets for &lt;a class="link" href="http://dataindevon.co.uk" target="_blank" rel="noopener"
>Data In Devon here&lt;/a> – It is in Exeter on April 26th and 27th)&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>If I want to create the same environment but give it tags for a different event (This way I know when I can delete resources in Azure!) or name it differently, I can use Azure DevOps and alter the variables. I could just alter the code and commit the change and trigger a build or I could create variables and enable them to be set at the time the job is run. I use the former in “work” situations and the second for my presentations environment.&lt;/p>
&lt;p>I have created a project in &lt;a class="link" href="https://azure.microsoft.com/en-gb/services/devops/?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>Azure DevOps&lt;/a> for my Presentation Builds. I will be using GitHub to share the code that I have used. Once I clicked on pipelines, this is the page I saw&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-51.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-51.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Clicking new pipeline, Azure DevOps asked me where my code was&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-52.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-52.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I chose GitHub, authorised and chose the repository.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-53.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-53.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I then chose Empty Job on the next page. See the Configuration as code choice? We will come back to that later and our infrastructure as code will be deployed with a configuration as code 🙂&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-54.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-54.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The next page allows us to give the build a good name and choose the Agent Pool that we want to use. Azure DevOps gives 7 different hosted agents running Linux, Mac, Windows or you can download an agent and run it on your own cpus. We will use the default agent for this process.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-55.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-55.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Clicking on Agent Job 1 enables me to change the name of the Agent Job. I could also choose a different type of Agent for different jobs within the same pipeline. This would be useful for testing different OS’s for example but for right now I shall just name it properly.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-65.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-65.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="state">State&lt;/h2>
&lt;p>First we need somewhere to store the state of our build so that if we re-run it the Terraform plan step will be able to work out what it needs to do. (This is not absolutely required just for building my presentation environments and this might not be the best way to achieve this but for right now this is what I do and it works.)&lt;/p>
&lt;p>I click on the + and search for Azure CLI.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-58.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-58.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and click on the Add button which gives me some boxes to fill in.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-59.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-59.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I choose my Azure subscription from the first drop down and choose Inline Script from the second&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-60.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-60.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Inside the script block I put the following code&lt;/p>
&lt;pre>&lt;code># the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
call az group create --location $(location) --name $(TerraformStorageRG)
call az storage account create --name $(TerraformStorageAccount) --resource-group $(TerraformStorageRG) --location $(location) --sku Standard_LRS
call az storage container create --name terraform --account-name $(TerraformStorageAccount)
&lt;/code>&lt;/pre>
&lt;p>This will create a Resource Group, a storage account and a container and use some variables to provide the values, we will come back to the variables later.&lt;/p>
&lt;h2 id="access-key">Access Key&lt;/h2>
&lt;p>The next thing that we need to do is to to enable the job to be able to access the storage account. We don’t want to store that key anywhere but we can use our Azure DevOps variables and some PowerShell to gather the access key and write it to the variable when the job is running . To create the variables I clicked on the variables tab&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-66.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-66.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and then added the variables with the following names TerraformStorageRG, TerraformStorageAccount and location from the previous task and TerraformStorageKey for the next task.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-62.png"
loading="lazy"
>&lt;/p>
&lt;p>With those created, I go back to Tasks and add an Azure PowerShell task&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-63.png"
loading="lazy"
>&lt;/p>
&lt;p>I then add this code to get the access key and overwrite the variable.&lt;/p>
&lt;pre>&lt;code># Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
$key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(TerraformStorageRG) -AccountName $(TerraformStorageAccount)).Value[0]
Write-Host &amp;quot;##vso[task.setvariable variable=TerraformStorageKey]$key&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-67.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-67.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="infrastructure-as-code">Infrastructure as Code&lt;/h2>
&lt;p>In &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AzureSQLDB" target="_blank" rel="noopener"
>my GitHub repository&lt;/a> I now have the following folders&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-64.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-64.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The manual folders hold the code &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>from the last blog post&lt;/a>. In the Build folder, the main.tf file is identical and looks like this.&lt;/p>
&lt;pre>&lt;code>provider &amp;quot;azurerm&amp;quot; {
version = &amp;quot;=1.24.0&amp;quot;
}
terraform {
backend &amp;quot;azurerm&amp;quot; {
key = &amp;quot;terraform.tfstate&amp;quot;
}
}
resource &amp;quot;azurerm_resource_group&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.ResourceGroupName}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_server&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlServerName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_resource_group.presentation.name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
version = &amp;quot;12.0&amp;quot;
administrator_login = &amp;quot;__SQLServerAdminUser__&amp;quot;
administrator_login_password = &amp;quot;__SQLServerAdminPassword__&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_database&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlDatabaseName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_sql_server.presentation.resource_group_name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
server_name = &amp;quot;${azurerm_sql_server.presentation.name}&amp;quot;
edition = &amp;quot;${var.Edition}&amp;quot;
requested_service_objective_name = &amp;quot;${var.ServiceObjective}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;p>The variables.tf folder looks like this.&lt;/p>
&lt;pre>&lt;code>variable &amp;quot;presentation&amp;quot; {
description = &amp;quot;The name of the presentation - used for tagging Azure resources so I know what they belong to&amp;quot;
default = &amp;quot;__Presentation__&amp;quot;
}
variable &amp;quot;ResourceGroupName&amp;quot; {
description = &amp;quot;The Prefix used for all resources in this example&amp;quot;
default = &amp;quot;__ResourceGroupName__&amp;quot;
}
variable &amp;quot;location&amp;quot; {
description = &amp;quot;The Azure Region in which the resources in this example should exist&amp;quot;
default = &amp;quot;__location__&amp;quot;
}
variable &amp;quot;SqlServerName&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server to be created or to have the database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;__SqlServerName__&amp;quot;
}
variable &amp;quot;SQLServerAdminUser&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server Admin user for the Azure SQL Database&amp;quot;
default = &amp;quot;__SQLServerAdminUser__&amp;quot;
}
variable &amp;quot;SQLServerAdminPassword&amp;quot; {
description = &amp;quot;The Azure SQL Database users password&amp;quot;
default = &amp;quot;__SQLServerAdminPassword__&amp;quot;
}
variable &amp;quot;SqlDatabaseName&amp;quot; {
description = &amp;quot;The name of the Azure SQL database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;__SqlDatabaseName__&amp;quot;
}
variable &amp;quot;Edition&amp;quot; {
description = &amp;quot;The Edition of the Database - Basic, Standard, Premium, or DataWarehouse&amp;quot;
default = &amp;quot;__Edition__&amp;quot;
}
variable &amp;quot;ServiceObjective&amp;quot; {
description = &amp;quot;The Service Tier S0, S1, S2, S3, P1, P2, P4, P6, P11 and ElasticPool&amp;quot;
default = &amp;quot;__ServiceObjective__&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>It is exactly the same except that the values have been replaced by the value name prefixed and suffixed with __. This will enable me to replace the values with the variables in my Azure DevOps Build job.&lt;/p>
&lt;p>The backend-config.tf file will store the details of the state that will be created by the first step and use the access key that has been retrieved in the second step.&lt;/p>
&lt;pre>&lt;code>resource_group_name = &amp;quot;__TerraformStorageRG__&amp;quot;
storage_account_name = &amp;quot;__TerraformStorageAccount__&amp;quot;
container_name = &amp;quot;terraform&amp;quot;
access_key = &amp;quot;__TerraformStorageKey__&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>I need to add the following variables to my Azure DevOps Build – Presentation, ResourceGroupName, SqlServerName, SQLServerAdminUser, SQLServerAdminPassword, SqlDatabaseName, Edition, ServiceObjective . Personally I would advise setting the password or any other sensitive values to sensitive by clicking the padlock for that variable. This will stop the value being written to the log as well as hiding it behind *’s&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-69.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-69.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Because I have tagged the variables with Settable at queue time , I can set the values whenever I run a build, so if I am at a different event I can change the name.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-70.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-70.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>But the build job hasn’t been set up yet. First we need to replace the values in the variables file.&lt;/p>
&lt;h2 id="replace-the-tokens">Replace the Tokens&lt;/h2>
&lt;p>I installed the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=qetza.replacetokens" target="_blank" rel="noopener"
>Replace Tokens Task&lt;/a> from the marketplace and added that to the build.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-72.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-72.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I am going to use a standard naming convention for my infrastructure code files so I add Build to the Root Directory. You can also click the ellipses and navigate to a folder in your repo. In the Target Files I add &lt;em>”&lt;/em>&lt;em>/*&lt;/em>.tf” and “&lt;strong>&lt;em>/*&lt;/em>.tfvars” which will search all of the folders (&lt;/strong>) and only work on files with a .tf or .tfvars extension (/*.tfvars) The next step is to make sure that the replacement prefix and suffix are correct. It is hidden under Advanced&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-74.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-74.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Because I often forget this step and to aid in troubleshooting I add another step to read the contents of the files and place them in the logs. I do this by adding a PowerShell step which uses&lt;/p>
&lt;pre>&lt;code>Get-ChildItem .\Build -Recurse
Get-Content .\Build\*.tf
Get-Content .\Build\*.tfvars
&lt;/code>&lt;/pre>
&lt;p>Under control options there is a check box to enable or disable the steps so once I know that everything is ok with the build I will disable this step. The output in the log of a build will look like this showing the actual values in the files. This is really useful for finding spaces :-).&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-76.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-76.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="running-the-terraform-in-azure-devops">Running the Terraform in Azure DevOps&lt;/h2>
&lt;p>With everything set up we can now run the Terraform. I installed the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform" target="_blank" rel="noopener"
>Terraform task&lt;/a> from the marketplace and added a task. We are going to follow the same process as the last blog post, init, plan, apply but this time we are going to automate it 🙂&lt;/p>
&lt;p>First we will initialise&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-130.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-130.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I put Build in the Terraform Template path. The Terraform arguments are&lt;/p>
&lt;pre>&lt;code>init -backend-config=&amp;quot;0-backend-config.tfvars&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>which will tell the Terraform to use the backend-config.tfvars file for the state. It is important to tick the Install terraform checkbox to ensure that terraform is available on the agent and to add the Azure Subscription (or Service Endpoint in a corporate environment&lt;/p>
&lt;p>After the Initialise, I add the Terraform task again add Build to the target path and this time the argument is plan&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-78.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-78.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Again, tick the install terraform checkbox and also the Use Azure Service Endpoint and choose the Azure Subscription.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-131.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-131.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>We also need to tell the Terraform where to find the tfstate file by specifying the variables for the resource group and storage account and the container&lt;/p>
&lt;p>Finally, add another Terraform task for the apply remembering to tick the install Terraform and Use Azure checkboxes&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-79.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-79.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The arguments are&lt;/p>
&lt;pre>&lt;code>apply -auto-approve
&lt;/code>&lt;/pre>
&lt;p>This will negate the requirement for the “Only “yes” will be accepted to approve” &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>from the manual steps post&lt;/a>!&lt;/p>
&lt;h2 id="build-a-thing">Build a Thing&lt;/h2>
&lt;p>Now we can build the environment – Clicking Save and Queue&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-80.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-80.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>opens this dialogue&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-81.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-81.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>where the variables can be filled in.&lt;/p>
&lt;p>The build will be queued and clicking on the build number will open the logs&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-82.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-82.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-83.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-83.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>6 minutes later the job has finished&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-84.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-84.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and the resources have been created.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-85.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-85.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>If I want to look in the logs of the job I can click on one of the steps and take a look. This is the apply step&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-87.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-87.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="do-it-again-for-another-presentation">Do it Again For Another Presentation&lt;/h2>
&lt;p>So that is good, I can create my environment as I want it. Once my presentation has finished I can delete the Resource Groups. When I need to do the presentation again, I can queue another build and change the variables&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-88.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-88.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-89.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-89.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The job will run&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-90.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-90.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and the new resource group will be created&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-91.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-91.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>all ready for my next presentation 🙂&lt;/p>
&lt;p>This is brilliant, I can set up the same solution for different repositories for different presentations (infrastructure) and recreate the above steps.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups/" target="_blank" rel="noopener"
>The next post will show how to use Azure DevOps Task Groups to use the same build steps in multiple pipelines and build an Azure Linux SQL Server VM&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/" target="_blank" rel="noopener"
>The post after that will show how to use Azure DevOps templates to use the same build steps across many projects and build pipelines and will build a simple AKS cluster&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>The first post showed how to build an Azure SQL Database with Terraform using VS Code&lt;/a>&lt;/p></description></item></channel></rss>