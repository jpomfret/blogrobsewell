<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>psdayuk on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/psdayuk/</link><description>Recent content in psdayuk on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 09 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/psdayuk/index.xml" rel="self" type="application/rss+xml"/><item><title>Automatically updating the version number in a PowerShell Module â€“ How I do regex</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/automatically-updating-the-version-number-in-a-powershell-module-how-i-do-regex/</link><pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/automatically-updating-the-version-number-in-a-powershell-module-how-i-do-regex/</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>[version]$Version = [regex]::matches($file, &amp;ldquo;\s&lt;em>ModuleVersion\s=\s&amp;rsquo;(\d&lt;/em>.\d*.\d*)&amp;rsquo;\s*&amp;rdquo;).groups[1].value&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h1 id="use-regex-to-get-the-version-number-and-set-it-as-a-version-datatype">Use RegEx to get the Version Number and set it as a version datatype&lt;/h1>
&lt;h1 id="s---between-0-and-many-whitespace">\s* - between 0 and many whitespace&lt;/h1>
&lt;h1 id="moduleversion---literal">ModuleVersion - literal&lt;/h1>
&lt;h1 id="s---1-whitespace">\s - 1 whitespace&lt;/h1>
&lt;h1 id="---literal">= - literal&lt;/h1>
&lt;h1 id="s---1-whitespace-1">\s - 1 whitespace&lt;/h1>
&lt;h1 id="---literal-1">&amp;rsquo; - literal&lt;/h1>
&lt;h1 id="---capture-group">() - capture Group&lt;/h1>
&lt;h1 id="d---between-0-and-many-digits">\d* - between 0 and many digits&lt;/h1>
&lt;h1 id="---literal-2">&amp;rsquo; - literal&lt;/h1>
&lt;h1 id="s-between-0-and-many-whitespace">\s* between 0 and many whitespace&lt;/h1>
&lt;p>[version]$Version = [regex]::matches($file, &amp;ldquo;\s&lt;em>ModuleVersion\s=\s&amp;rsquo;(\d&lt;/em>.\d*.\d*)&amp;rsquo;\s*&amp;rdquo;).groups[1].value
Write-Output &amp;ldquo;Old Version - $Version&amp;rdquo;&lt;/p>
&lt;h1 id="add-one-to-the-build-of-the-version-number">Add one to the build of the version number&lt;/h1>
&lt;p>[version]$NewVersion = &amp;ldquo;{0}.{1}.{2}&amp;rdquo; -f $Version.Major, $Version.Minor, ($Version.Build + 1)
Write-Output &amp;ldquo;New Version - $NewVersion&amp;rdquo;&lt;/p>
&lt;h1 id="replace-old-version-number-with-new-version-number-in-the-file">Replace Old Version Number with New Version number in the file&lt;/h1>
&lt;p>try {
(Get-Content .\BeardAnalysis.psd1) -replace $version, $NewVersion | Out-File .\BeardAnalysis.psd1
Write-Output &amp;ldquo;Updated Module Version from $Version to $NewVersion&amp;rdquo;
}
catch {
$_
Write-Error &amp;ldquo;failed to set file&amp;rdquo;
}
&lt;!-- raw HTML omitted -->&lt;/p>
&lt;!-- raw HTML omitted --></description></item></channel></rss>