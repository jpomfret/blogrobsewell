<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>verbose on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/verbose/</link><description>Recent content in verbose on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Jan 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/verbose/index.xml" rel="self" type="application/rss+xml"/><item><title>How to write a PowerShell function to use Confirm, Verbose and WhatIf</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/how-to-write-a-powershell-function-to-use-confirm-verbose-and-whatif/</link><pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/how-to-write-a-powershell-function-to-use-confirm-verbose-and-whatif/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2018/01/03-confirm.png" alt="Featured image of post How to write a PowerShell function to use Confirm, Verbose and WhatIf" />&lt;p>In &lt;a class="link" href="https://blog.robsewell.com/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/" target="_blank" rel="noopener"
>my last blog post&lt;/a> I showed how to run a script with the WhatIf parameter. This assumes that the commands within the script have been written to use the common parameters Confirm, Verbose and WhatIf.&lt;/p>
&lt;p>Someone asked me how to make sure that any functions that they write will be able to do this.&lt;/p>
&lt;p>it is very easy&lt;/p>
&lt;p>When we define our function we are going to add &lt;code>[cmdletbinding(SupportsShouldProcess)]&lt;/code> at the top&lt;/p>
&lt;pre>&lt;code>function Set-FileContent {
[cmdletbinding(SupportsShouldProcess)]
Param()
&lt;/code>&lt;/pre>
&lt;p>and every time we perform an action that will change something we put that code inside a code block like this&lt;/p>
&lt;pre>&lt;code>if ($PSCmdlet.ShouldProcess(&amp;quot;The Item&amp;quot; , &amp;quot;The Change&amp;quot;)) {
# place code here
}
&lt;/code>&lt;/pre>
&lt;p>and alter The Item and The Change as appropriate.&lt;/p>
&lt;p>I have created a snippet for VS Code to make this quicker for me. To add it to your VS Code. Click the settings button bottom right, Click User Snippets, choose the powershell json and add the code below between the last two }’s (Don’t forget the comma)&lt;/p>
&lt;pre>&lt;code>,
&amp;quot;IfShouldProcess&amp;quot;: {
&amp;quot;prefix&amp;quot;: &amp;quot;IfShouldProcess&amp;quot;,
&amp;quot;body&amp;quot;: [
&amp;quot;if ($$PSCmdlet.ShouldProcess(\&amp;quot;The Item\&amp;quot; , \&amp;quot;The Change\&amp;quot;)) {&amp;quot;,
&amp;quot; # Place Code here&amp;quot;,
&amp;quot;}&amp;quot;
],
&amp;quot;description&amp;quot;: &amp;quot;Shows all the colour indexes for the Excel colours&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>and save the powershell.json file&lt;/p>
&lt;p>Then when you are writing your code you can simply type “ifs” and tab and the code will be generated for you&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-VS-Code-Snippet.gif"
loading="lazy"
>&lt;/p>
&lt;p>As an example I shall create a function wrapped around Set-Content just so that you can see what happens.&lt;/p>
&lt;pre>&lt;code>function Set-FileContent {
[cmdletbinding(SupportsShouldProcess)]
Param(
[Parameter(Mandatory = $true)]
[ValidateNotNullOrEmpty()]
[string]$Content,
[Parameter(Mandatory = $true)]
[ValidateScript( {Test-Path $_ })]
[string]$File
)
if ($PSCmdlet.ShouldProcess(&amp;quot;$File&amp;quot; , &amp;quot;Adding $Content to &amp;quot;)) {
Set-Content -Path $File -Value $Content
}
}
&lt;/code>&lt;/pre>
&lt;p>I have done this before because if the file does not exist then &lt;code>Set-Content&lt;/code> will create a new file for you, but with this function I can check if the file exists first with the ValidateScript before running the rest of the function.&lt;/p>
&lt;p>As you can see I add variables from my PowerShell code into the “The Item” and “The Change”. If I need to add a property of an object I use &lt;code>$($Item.Property)&lt;/code>.&lt;/p>
&lt;p>So now, if I want to see what my new function would do if I ran it without actually making any changes I have -WhatIf added to my function automagically.&lt;/p>
&lt;pre>&lt;code>Set-FileContent -File C:\temp\number1\TextFile.txt -Content &amp;quot;This is the New Content&amp;quot; -WhatIf
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-what-if.png"
loading="lazy"
>&lt;/p>
&lt;p>If I want to confirm any action I take before it happens I have &lt;code>-Confirm&lt;/code>&lt;/p>
&lt;pre>&lt;code>Set-FileContent -File C:\temp\number1\TextFile.txt -Content &amp;quot;This is the New Content&amp;quot; -Confirm
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/03-confirm.png"
loading="lazy"
>&lt;/p>
&lt;p>As you can see it also give the confirm prompts for the &lt;code>Set-Content&lt;/code> command&lt;/p>
&lt;p>You can also see the verbose messages with&lt;/p>
&lt;pre>&lt;code>Set-FileContent -File C:\temp\number1\TextFile.txt -Content &amp;quot;This is the New Content&amp;quot; -Verbose
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/04-verbose.png"
loading="lazy"
>&lt;/p>
&lt;p>So to summarise, it is really very simple to add Confirm, WhatIf and Verbose to your functions by placing  &lt;code>[cmdletbinding(SupportsShouldProcess)]&lt;/code> at the top of the function and placing any code that makes a change inside&lt;/p>
&lt;pre>&lt;code>if ($PSCmdlet.ShouldProcess(&amp;quot;The Item&amp;quot; , &amp;quot;The Change&amp;quot;)) {
&lt;/code>&lt;/pre>
&lt;p>with some values that explain what the code is doing to the The Item and The Change.&lt;/p>
&lt;p>Bonus Number 1 – This has added support for other common parameters as well – Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.&lt;/p>
&lt;p>Bonus Number 2 – This has automatically been added to your Help&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/05-get-help.png"
loading="lazy"
>&lt;/p>
&lt;p>Bonus Number 3 – This has reduced the amount of comments you need to write and improved other peoples understanding of what your code is supposed to do 🙂 People can read your code and read what you have entered for the IfShouldProcess and that will tell them what the code is supposed to do 🙂&lt;/p>
&lt;p>Now you have seen how easy it is to write more professional PowerShell functions&lt;/p></description></item><item><title>How to run a PowerShell script file with Verbose, Confirm or WhatIf</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2018/01/02-Showing-the-results.png" alt="Featured image of post How to run a PowerShell script file with Verbose, Confirm or WhatIf" />&lt;p>Before you run a PowerShell command that makes a change to something you should check that it is going to do what you expect. You can do this by using the WhatIf parameter for commands that support it. For example, if you wanted to create a New SQL Agent Job Category you would use the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>awesome dbatools module&lt;/a> and write some code like this&lt;/p>
&lt;pre>&lt;code>New-DbaAgentJobCategory -SqlInstance ROB-XPS -Category 'Backup'
&lt;/code>&lt;/pre>
&lt;p>before you run it, you can check what it is going to do using&lt;/p>
&lt;pre>&lt;code>New-DbaAgentJobCategory -SqlInstance ROB-XPS -Category 'Backup' -WhatIf
&lt;/code>&lt;/pre>
&lt;p>which gives a result like this&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-Whatif.png"
loading="lazy"
>&lt;/p>
&lt;p>This makes it easy to do at the command line but when we get confident with PowerShell we will want to write scripts to perform tasks using more than one command. So how can we ensure that we can check that those will do what we are expecting without actually running the script and see what happens? Of course, there are Unit and integration testing that should be performed using &lt;a class="link" href="https://blog.robsewell.com/writing-dynamic-and-random-tests-cases-for-pester/" target="_blank" rel="noopener"
>Pester&lt;/a> when developing the script but there will still be occasions when we want to see what this script will do this time in this environment.&lt;/p>
&lt;p>Lets take an example. We want to place our SQL Agent jobs into specific custom categories depending on their name. We might write a script like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;#
.SYNOPSIS
Adds SQL Agent Jobs to categories and creates the categories if needed
.DESCRIPTION
Adds SQL Agent Jobs to categories and creates the categories if needed. Creates
Backup', 'Index', 'TroubleShooting','General Info Gathering' categories and adds
the agent jobs depending on name to the category
.PARAMETER Instance
The Instance to run the script against
#&amp;gt;
Param(
[string]$Instance
)
$Categories = 'Backup', 'Index','DBCC', 'TroubleShooting', 'General Info Gathering'
$Categories.ForEach{
## Create Category if it doesnot exist
If (-not (Get-DbaAgentJobCategory -SqlInstance $instance -Category $PSItem)) {
New-DbaAgentJobCategory -SqlInstance $instance -Category $PSItem -CategoryType LocalJob
}
}
## Get the agent jobs and iterate through them
(Get-DbaAgentJob -SqlInstance $instance).ForEach{
## Depending on the name of the Job - Put it in a Job Category
switch -Wildcard ($PSItem.Name) {
'*DatabaseBackup*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'Backup'
}
'*Index*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'Index'
}
'*DatabaseIntegrity*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'DBCC'
}
'*Log SP_*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'TroubleShooting'
}
'*Collection*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'General Info Gathering'
}
## Otherwise put it in the uncategorised category
Default {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category '[Uncategorized (Local)]'
}
}
}
&lt;/code>&lt;/pre>
&lt;p>You can run this script against any SQL instance by calling  it and passing an instance parameter from the command line like this&lt;/p>
&lt;pre>&lt;code> &amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>If you wanted to see what would happen, you could edit the script and add the WhatIf parameter to every changing command but that’s not really a viable solution. What you can do is&lt;/p>
&lt;pre>&lt;code>$PSDefaultParameterValues['*:WhatIf'] = $true
&lt;/code>&lt;/pre>
&lt;p>this will set all commands that accept WhatIf to use the WhatIf parameter. This means that if you are using functions that you have written internally you must ensure that you write your functions to use the common parameters&lt;/p>
&lt;p>Once you have set the default value for WhatIf as above, you can simply call your script and see the WhatIf output&lt;/p>
&lt;pre>&lt;code> &amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>which will show the WhatIf output for the script&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-Showing-the-results.png"
loading="lazy"
>&lt;/p>
&lt;p>Once you have checked that everything is as you expected then you can remove the default value for the WhatIf parameter and run the script&lt;/p>
&lt;pre>&lt;code>$PSDefaultParameterValues['*:WhatIf'] = $false
&amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>and get the expected output&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/03-run-the-script-1.png"
loading="lazy"
>&lt;/p>
&lt;p>If you wish to see the verbose output or ask for confirmation before any change you can set those default parameters like this&lt;/p>
&lt;pre>&lt;code>## To Set Verbose output
$PSDefaultParameterValues['*:Verbose'] = $true
## To Set Confirm
$PSDefaultParameterValues['*:Confirm'] = $true
&lt;/code>&lt;/pre>
&lt;p>and set them back by setting to false&lt;/p></description></item></channel></rss>