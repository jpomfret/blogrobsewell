<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure SQL Database on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/azure-sql-database/</link><description>Recent content in Azure SQL Database on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/azure-sql-database/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating Azure SQL Database AAD Contained Database Users with an SPN using PowerShell, Secrets Management, Azure Key Vault, and dbatools</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/creating-azure-sql-database-aad-contained-database-users-with-an-spn-using-powershell-secrets-management-azure-key-vault-and-dbatools/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/creating-azure-sql-database-aad-contained-database-users-with-an-spn-using-powershell-secrets-management-azure-key-vault-and-dbatools/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2020/08/image-16.png" alt="Featured image of post Creating Azure SQL Database AAD Contained Database Users with an SPN using PowerShell, Secrets Management, Azure Key Vault, and dbatools" />&lt;p>Following on from my posts about using Secret Management &lt;a class="link" href="https://blog.robsewell.com/good-bye-import-clixml-use-the-secrets-management-module-for-your-labs-and-demos/" target="_blank" rel="noopener"
>Good bye Import-CliXml&lt;/a> and &lt;a class="link" href="https://blog.robsewell.com/using-secret-management-module-to-run-ssms-vs-code-and-azure-data-studio-as-another-user/" target="_blank" rel="noopener"
>running programmes as a different user&lt;/a>, I have another use case.&lt;/p>
&lt;p>After creating Azure SQL Databases in an Elastic Pool using a process pretty similar to this one &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>I blogged about last year&lt;/a>, I needed to be able to programmatically create users and assign permissions.&lt;/p>
&lt;h2 id="i-need-a-user-to-login-with">I need a user to login with&lt;/h2>
&lt;p>When I created my Azure SQL Server with Terraform, I set the Azure Admin to be a SPN as you can see in the image from the portal and set it to have an identity using the documentation for &lt;a class="link" href="https://www.terraform.io/docs/providers/azurerm/r/sql_server.html" target="_blank" rel="noopener"
>azurerm_mssql_server&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-9.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-18.png"
loading="lazy"
>
This allows this user to manage the access for the SQL Server as long as the SQL Server Azure AD identity has Directory Reader privileges. The SQL Server is called temp-beard-sqls and as you can see the identity is assigned to the role.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-11.png"
loading="lazy"
>
The privileges required to do this for a single identity are quite high&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-12.png"
loading="lazy"
>&lt;/p>
&lt;p>so now, you can assign an Azure Active Directory Group to that Role and allow less-privileged users to add the identity to this group . The documentation is &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-service-principal?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>here&lt;/a> and there is a tutorial &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-service-principal-tutorial?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>here&lt;/a> explaining the steps you need to take.&lt;/p>
&lt;h2 id="what-is-an-azure-spn">What is an Azure SPN?&lt;/h2>
&lt;blockquote>
&lt;p>An Azure service principal is an identity created for use with applications, hosted services, and automated tools to access Azure resources.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?toc=%2Fazure%2Fazure-resource-manager%2Ftoc.json&amp;amp;view=azure-cli-latest?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?toc=%2Fazure%2Fazure-resource-manager%2Ftoc.json&amp;amp;view=azure-cli-latest&lt;/a>&lt;/p>
&lt;p>I created the SPN using Azure CLI straight from the Azure Portal by clicking this button&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-2.png"
loading="lazy"
>&lt;/p>
&lt;p>and running&lt;/p>
&lt;pre>&lt;code>az ad sp create-for-rbac --name ServicePrincipalName
&lt;/code>&lt;/pre>
&lt;p>This will quickly create a SPN for you and return the password&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-3.png"
loading="lazy"
>&lt;/p>
&lt;p>Yes I have deleted this one&lt;/p>
&lt;h2 id="add-azure-key-vault-to-secret-management">Add Azure Key Vault to Secret Management&lt;/h2>
&lt;p>In my previous posts, I have been using the Default Key Vault which is limited to your local machine and the user that is running the code. It would be better to use Azure Key Vault to store the details for the SPN so that it safely stored in the cloud and not on my machine and also so that anyone (or app) that has permissions to the vault can use it.&lt;/p>
&lt;p>First you need to login to Azure in PowerShell (You will need to have the AZ* modules installed)&lt;/p>
&lt;pre>&lt;code>Connect-AzAccount
&lt;/code>&lt;/pre>
&lt;p>Be aware, the login box can appear behind the VS Code or Azure Data Studio window!&lt;/p>
&lt;p>Once connected, if you have several Azure subscriptions, you can list them with&lt;/p>
&lt;pre>&lt;code>Get-AzSubscription
&lt;/code>&lt;/pre>
&lt;p>You can choose your subscription with&lt;/p>
&lt;pre>&lt;code>$AzureSubscription = Set-AzContext -SubscriptionName &amp;quot;NAME OF SUBSCRIPTION&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>For the Secret Management Module to manage the Azure Key Vault, you first need to register it.&lt;/p>
&lt;p>Ensure that you have permissions to connect by following the details in the network security documentation &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/key-vault/general/network-security?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/azure/key-vault/general/network-security&lt;/a> and the secure access documentation &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/key-vault/general/secure-your-key-vault?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>https://docs.microsoft.com/en-us/azure/key-vault/general/secure-your-key-vault&lt;/a>&lt;/p>
&lt;p>Then you can run &lt;code>Register-SecretVault&lt;/code> . You need to provide the local name for the key vault, the module name &lt;code>Az.KeyVault&lt;/code>, and a &lt;code>VaultParameters&lt;/code> hashtable with the KeyVault name and the Azure Subscription ID. You can register other types of Key Vaults to the Secret Management module in this way and they will require different values for the &lt;code>VaultParameters&lt;/code> parameter.&lt;/p>
&lt;pre>&lt;code>$KeyVaultName = 'beard-key-vault'
Register-SecretVault -Name BeardKeyVault -ModuleName Az.KeyVault -VaultParameters @{ AZKVaultName = $KeyVaultName; SubscriptionId = $AzureSubscription.Subscription.Id }
&lt;/code>&lt;/pre>
&lt;h2 id="adding-the-spn-details-to-the-azure-key-vault">Adding the SPN details to the Azure Key Vault&lt;/h2>
&lt;p>Using the values for AppID – (Note NOT the display name) and the values for the password from the Azure CLI output or by creating a new secret for the SPN with PowerShell or via the portal. You can use the following code to add the SPN details and the tenantid to the Azure Key Vault using the Secret Management module&lt;/p>
&lt;pre>&lt;code>$ClientId = Read-Host &amp;quot;Enter ClientID&amp;quot; -AsSecureString
$SecretFromPortal = Read-Host &amp;quot;Enter Client Secret&amp;quot; -AsSecureString
$tenantid = Read-Host &amp;quot;Enter TenantId&amp;quot; -AsSecureString
Set-Secret -Vault BeardKeyVault -Name service-principal-guid -Secret $ClientId
Set-Secret -Vault BeardKeyVault -Name service-principal-secret -SecureStringSecret $SecretFromPortal
Set-Secret -Vault BeardKeyVault -Name Tenant-Id -Secret $tenantid
&lt;/code>&lt;/pre>
&lt;p>You can also do this with the Az.KeyVault module by following the instructions &lt;a class="link" href="https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-powershell?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p>
&lt;p>You can see the secrets in the portal&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-6.png"
loading="lazy"
>&lt;/p>
&lt;p>and also at the command line with the Secret Management module using&lt;/p>
&lt;pre>&lt;code>Get-SecretInfo -Vault RegisteredNameOfVault
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-5.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="can-my-user-connect">Can my user connect?&lt;/h2>
&lt;p>If I try to connect in Azure Data Studio to my Azure SQL Database with my AAD account to the temp-sql-db-beard database. It fails.&lt;/p>
&lt;p>By the way a great resource for troubleshooting the SQL error 18456 failure states can be found here &lt;a class="link" href="https://sqlblog.org/2020/07/28/troubleshooting-error-18456" target="_blank" rel="noopener"
>https://sqlblog.org/2020/07/28/troubleshooting-error-18456&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-13.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="dbatools-to-the-rescue-">dbatools to the rescue 🙂&lt;/h2>
&lt;p>dbatools is an open source community collaboration PowerShell module for administrating SQL Server. You can find more about it at &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools.io&lt;/a> and get the book that Chrissy and I are writing about dbatools at &lt;a class="link" href="http://dbatools.io%5Cbook" target="_blank" rel="noopener"
>dbatools.io\book&lt;/a>&lt;/p>
&lt;p>You can connect to Azure SQL Database with an Azure SPN using the following code. It will get the secrets from the Azure Key Vault that have been set above and create a connection. Lets see if I can run a query as the SPN.&lt;/p>
&lt;pre>&lt;code>$SqlInstance = 'temp-beard-sqls.database.windows.net'
$databasename = 'master'
$appid = Get-Secret -Vault BeardKeyVault -Name service-principal-guid -AsPlainText
$Clientsecret = Get-Secret -Vault BeardKeyVault -Name service-principal-secret
$credential = New-Object System.Management.Automation.PSCredential ($appid,$Clientsecret)
$tenantid = Get-Secret -Vault BeardKeyVault -Name Sewells-Tenant-Id -AsPlainText
$AzureSQL = Connect-DbaInstance -SqlInstance $SqlInstance -Database $databasename -SqlCredential $credential -Tenant $tenantid -TrustServerCertificate
Invoke-DbaQuery -SqlInstance $AzureSql -Database master -SqlCredential $credential -Query &amp;quot;Select SUSER_NAME() as 'username'&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-14.png"
loading="lazy"
>&lt;/p>
&lt;p>Excellent 🙂&lt;/p>
&lt;h2 id="add-a-user-to-the-user-database">Add a user to the user database&lt;/h2>
&lt;p>I can then add my user to the temp-sql-db-beard Database. I need to create a new connection to the user database as you cannot use the &lt;code>USE [DatabaseName]&lt;/code> statement&lt;/p>
&lt;pre>&lt;code>$Userdatabasename = 'temp-sql-db-beard'
$AzureSQL = Connect-DbaInstance -SqlInstance $SqlInstance -Database $Userdatabasename -SqlCredential $credential -Tenant $tenantid -TrustServerCertificate
&lt;/code>&lt;/pre>
&lt;p>Whilst you can use dbatools to create new users in Azure SQL Database at present you cant create AAD users. You can run a T-SQL Script to do this though. This script will create a contained database user in the database. I have added the role membership also but this can also be done with &lt;a class="link" href="https://docs.dbatools.io/#Add-DbaDbRoleMember" target="_blank" rel="noopener"
>Add-DbaDbRoleMember&lt;/a> from dbatools&lt;/p>
&lt;pre>&lt;code>$Query = @&amp;quot;
CREATE USER [rob@sewells-consulting.co.uk] FROM EXTERNAL PROVIDER
ALTER ROLE db_datareader ADD MEMBER [rob@sewells-consulting.co.uk]
&amp;quot;@
Invoke-DbaQuery -SqlInstance $AzureSql -Database $Userdatabasename -SqlCredential $credential -Query $Query
&lt;/code>&lt;/pre>
&lt;p>Lets check the users on the database with dbatools&lt;/p>
&lt;pre>&lt;code>Get-DbaDbUser -SqlInstance $AzureSql -Database $Userdatabasename |Out-GridView
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-15.png"
loading="lazy"
>&lt;/p>
&lt;p>I have my user and it is of type External user. Lets see if I can connect&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-16.png"
loading="lazy"
>&lt;/p>
&lt;p>Bingo 🙂&lt;/p>
&lt;p>Happy Automating&lt;/p>
&lt;p>Because I dont like to see awesome people struggling with PowerShell&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2020/08/image-17.png"
loading="lazy"
>&lt;/p>
&lt;p>Here is the same code using just the Az.KeyVault module&lt;/p>
&lt;pre>&lt;code>$appid = (Get-AzKeyVaultSecret -vaultName &amp;quot;beard-key-vault&amp;quot; -name &amp;quot;service-principal-guid&amp;quot;).SecretValueText
$Clientsecret = (Get-AzKeyVaultSecret -vaultName &amp;quot;beard-key-vault&amp;quot; -name &amp;quot;service-principal-secret&amp;quot;).SecretValue
$credential = New-Object System.Management.Automation.PSCredential ($appid,$Clientsecret)
$tenantid = (Get-AzKeyVaultSecret -vaultName &amp;quot;beard-key-vault&amp;quot; -name &amp;quot;Sewells-Tenant-Id&amp;quot;).SecretValueText
$AzureSQL = Connect-DbaInstance -SqlInstance $SqlInstance -Database $databasename -SqlCredential $credential -Tenant $tenantid -TrustServerCertificate
&lt;/code>&lt;/pre></description></item><item><title>Building Azure SQL Db with Terraform using Azure DevOps</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-using-azure-devops/</link><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-using-azure-devops/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2019/04/image-49.png" alt="Featured image of post Building Azure SQL Db with Terraform using Azure DevOps" />&lt;p>In &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>my last post&lt;/a> I showed how to create a Resource Group and an Azure SQL Database with Terraform using Visual Studio Code to deploy.&lt;/p>
&lt;p>Of course, I haven&amp;rsquo;t stopped there, who wants to manually run code to create things. There was a lot of install this and set up that. I would rather give the code to a build system and get it to run it. I can then even set it to automatically deploy new infrastructure when I commit some code to alter the configuration.&lt;/p>
&lt;p>This scenario though is to build environments for presentations. Last time I created an Azure SQL DB and tagged it with DataInDevon (By the way you can get tickets for &lt;a class="link" href="http://dataindevon.co.uk" target="_blank" rel="noopener"
>Data In Devon here&lt;/a> – It is in Exeter on April 26th and 27th)&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>If I want to create the same environment but give it tags for a different event (This way I know when I can delete resources in Azure!) or name it differently, I can use Azure DevOps and alter the variables. I could just alter the code and commit the change and trigger a build or I could create variables and enable them to be set at the time the job is run. I use the former in “work” situations and the second for my presentations environment.&lt;/p>
&lt;p>I have created a project in &lt;a class="link" href="https://azure.microsoft.com/en-gb/services/devops/?WT.mc_id=DP-MVP-5002693" target="_blank" rel="noopener"
>Azure DevOps&lt;/a> for my Presentation Builds. I will be using GitHub to share the code that I have used. Once I clicked on pipelines, this is the page I saw&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-51.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-51.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Clicking new pipeline, Azure DevOps asked me where my code was&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-52.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-52.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I chose GitHub, authorised and chose the repository.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-53.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-53.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I then chose Empty Job on the next page. See the Configuration as code choice? We will come back to that later and our infrastructure as code will be deployed with a configuration as code 🙂&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-54.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-54.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The next page allows us to give the build a good name and choose the Agent Pool that we want to use. Azure DevOps gives 7 different hosted agents running Linux, Mac, Windows or you can download an agent and run it on your own cpus. We will use the default agent for this process.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-55.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-55.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Clicking on Agent Job 1 enables me to change the name of the Agent Job. I could also choose a different type of Agent for different jobs within the same pipeline. This would be useful for testing different OS’s for example but for right now I shall just name it properly.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-65.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-65.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="state">State&lt;/h2>
&lt;p>First we need somewhere to store the state of our build so that if we re-run it the Terraform plan step will be able to work out what it needs to do. (This is not absolutely required just for building my presentation environments and this might not be the best way to achieve this but for right now this is what I do and it works.)&lt;/p>
&lt;p>I click on the + and search for Azure CLI.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-58.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-58.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and click on the Add button which gives me some boxes to fill in.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-59.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-59.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I choose my Azure subscription from the first drop down and choose Inline Script from the second&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-60.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-60.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Inside the script block I put the following code&lt;/p>
&lt;pre>&lt;code># the following script will create Azure resource group, Storage account and a Storage container which will be used to store terraform state
call az group create --location $(location) --name $(TerraformStorageRG)
call az storage account create --name $(TerraformStorageAccount) --resource-group $(TerraformStorageRG) --location $(location) --sku Standard_LRS
call az storage container create --name terraform --account-name $(TerraformStorageAccount)
&lt;/code>&lt;/pre>
&lt;p>This will create a Resource Group, a storage account and a container and use some variables to provide the values, we will come back to the variables later.&lt;/p>
&lt;h2 id="access-key">Access Key&lt;/h2>
&lt;p>The next thing that we need to do is to to enable the job to be able to access the storage account. We don’t want to store that key anywhere but we can use our Azure DevOps variables and some PowerShell to gather the access key and write it to the variable when the job is running . To create the variables I clicked on the variables tab&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-66.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-66.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and then added the variables with the following names TerraformStorageRG, TerraformStorageAccount and location from the previous task and TerraformStorageKey for the next task.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-62.png"
loading="lazy"
>&lt;/p>
&lt;p>With those created, I go back to Tasks and add an Azure PowerShell task&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-63.png"
loading="lazy"
>&lt;/p>
&lt;p>I then add this code to get the access key and overwrite the variable.&lt;/p>
&lt;pre>&lt;code># Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
$key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(TerraformStorageRG) -AccountName $(TerraformStorageAccount)).Value[0]
Write-Host &amp;quot;##vso[task.setvariable variable=TerraformStorageKey]$key&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-67.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-67.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="infrastructure-as-code">Infrastructure as Code&lt;/h2>
&lt;p>In &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AzureSQLDB" target="_blank" rel="noopener"
>my GitHub repository&lt;/a> I now have the following folders&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-64.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-64.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The manual folders hold the code &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>from the last blog post&lt;/a>. In the Build folder, the main.tf file is identical and looks like this.&lt;/p>
&lt;pre>&lt;code>provider &amp;quot;azurerm&amp;quot; {
version = &amp;quot;=1.24.0&amp;quot;
}
terraform {
backend &amp;quot;azurerm&amp;quot; {
key = &amp;quot;terraform.tfstate&amp;quot;
}
}
resource &amp;quot;azurerm_resource_group&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.ResourceGroupName}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_server&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlServerName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_resource_group.presentation.name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
version = &amp;quot;12.0&amp;quot;
administrator_login = &amp;quot;__SQLServerAdminUser__&amp;quot;
administrator_login_password = &amp;quot;__SQLServerAdminPassword__&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_database&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlDatabaseName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_sql_server.presentation.resource_group_name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
server_name = &amp;quot;${azurerm_sql_server.presentation.name}&amp;quot;
edition = &amp;quot;${var.Edition}&amp;quot;
requested_service_objective_name = &amp;quot;${var.ServiceObjective}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;p>The variables.tf folder looks like this.&lt;/p>
&lt;pre>&lt;code>variable &amp;quot;presentation&amp;quot; {
description = &amp;quot;The name of the presentation - used for tagging Azure resources so I know what they belong to&amp;quot;
default = &amp;quot;__Presentation__&amp;quot;
}
variable &amp;quot;ResourceGroupName&amp;quot; {
description = &amp;quot;The Prefix used for all resources in this example&amp;quot;
default = &amp;quot;__ResourceGroupName__&amp;quot;
}
variable &amp;quot;location&amp;quot; {
description = &amp;quot;The Azure Region in which the resources in this example should exist&amp;quot;
default = &amp;quot;__location__&amp;quot;
}
variable &amp;quot;SqlServerName&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server to be created or to have the database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;__SqlServerName__&amp;quot;
}
variable &amp;quot;SQLServerAdminUser&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server Admin user for the Azure SQL Database&amp;quot;
default = &amp;quot;__SQLServerAdminUser__&amp;quot;
}
variable &amp;quot;SQLServerAdminPassword&amp;quot; {
description = &amp;quot;The Azure SQL Database users password&amp;quot;
default = &amp;quot;__SQLServerAdminPassword__&amp;quot;
}
variable &amp;quot;SqlDatabaseName&amp;quot; {
description = &amp;quot;The name of the Azure SQL database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;__SqlDatabaseName__&amp;quot;
}
variable &amp;quot;Edition&amp;quot; {
description = &amp;quot;The Edition of the Database - Basic, Standard, Premium, or DataWarehouse&amp;quot;
default = &amp;quot;__Edition__&amp;quot;
}
variable &amp;quot;ServiceObjective&amp;quot; {
description = &amp;quot;The Service Tier S0, S1, S2, S3, P1, P2, P4, P6, P11 and ElasticPool&amp;quot;
default = &amp;quot;__ServiceObjective__&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>It is exactly the same except that the values have been replaced by the value name prefixed and suffixed with __. This will enable me to replace the values with the variables in my Azure DevOps Build job.&lt;/p>
&lt;p>The backend-config.tf file will store the details of the state that will be created by the first step and use the access key that has been retrieved in the second step.&lt;/p>
&lt;pre>&lt;code>resource_group_name = &amp;quot;__TerraformStorageRG__&amp;quot;
storage_account_name = &amp;quot;__TerraformStorageAccount__&amp;quot;
container_name = &amp;quot;terraform&amp;quot;
access_key = &amp;quot;__TerraformStorageKey__&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>I need to add the following variables to my Azure DevOps Build – Presentation, ResourceGroupName, SqlServerName, SQLServerAdminUser, SQLServerAdminPassword, SqlDatabaseName, Edition, ServiceObjective . Personally I would advise setting the password or any other sensitive values to sensitive by clicking the padlock for that variable. This will stop the value being written to the log as well as hiding it behind *’s&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-69.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-69.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Because I have tagged the variables with Settable at queue time , I can set the values whenever I run a build, so if I am at a different event I can change the name.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-70.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-70.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>But the build job hasn’t been set up yet. First we need to replace the values in the variables file.&lt;/p>
&lt;h2 id="replace-the-tokens">Replace the Tokens&lt;/h2>
&lt;p>I installed the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=qetza.replacetokens" target="_blank" rel="noopener"
>Replace Tokens Task&lt;/a> from the marketplace and added that to the build.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-72.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-72.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I am going to use a standard naming convention for my infrastructure code files so I add Build to the Root Directory. You can also click the ellipses and navigate to a folder in your repo. In the Target Files I add &lt;em>”&lt;/em>&lt;em>/*&lt;/em>.tf” and “&lt;strong>&lt;em>/*&lt;/em>.tfvars” which will search all of the folders (&lt;/strong>) and only work on files with a .tf or .tfvars extension (/*.tfvars) The next step is to make sure that the replacement prefix and suffix are correct. It is hidden under Advanced&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-74.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-74.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Because I often forget this step and to aid in troubleshooting I add another step to read the contents of the files and place them in the logs. I do this by adding a PowerShell step which uses&lt;/p>
&lt;pre>&lt;code>Get-ChildItem .\Build -Recurse
Get-Content .\Build\*.tf
Get-Content .\Build\*.tfvars
&lt;/code>&lt;/pre>
&lt;p>Under control options there is a check box to enable or disable the steps so once I know that everything is ok with the build I will disable this step. The output in the log of a build will look like this showing the actual values in the files. This is really useful for finding spaces :-).&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-76.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-76.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="running-the-terraform-in-azure-devops">Running the Terraform in Azure DevOps&lt;/h2>
&lt;p>With everything set up we can now run the Terraform. I installed the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=petergroenewegen.PeterGroenewegen-Xpirit-Vsts-Release-Terraform" target="_blank" rel="noopener"
>Terraform task&lt;/a> from the marketplace and added a task. We are going to follow the same process as the last blog post, init, plan, apply but this time we are going to automate it 🙂&lt;/p>
&lt;p>First we will initialise&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-130.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-130.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I put Build in the Terraform Template path. The Terraform arguments are&lt;/p>
&lt;pre>&lt;code>init -backend-config=&amp;quot;0-backend-config.tfvars&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>which will tell the Terraform to use the backend-config.tfvars file for the state. It is important to tick the Install terraform checkbox to ensure that terraform is available on the agent and to add the Azure Subscription (or Service Endpoint in a corporate environment&lt;/p>
&lt;p>After the Initialise, I add the Terraform task again add Build to the target path and this time the argument is plan&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-78.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-78.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Again, tick the install terraform checkbox and also the Use Azure Service Endpoint and choose the Azure Subscription.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-131.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-131.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>We also need to tell the Terraform where to find the tfstate file by specifying the variables for the resource group and storage account and the container&lt;/p>
&lt;p>Finally, add another Terraform task for the apply remembering to tick the install Terraform and Use Azure checkboxes&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-79.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-79.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The arguments are&lt;/p>
&lt;pre>&lt;code>apply -auto-approve
&lt;/code>&lt;/pre>
&lt;p>This will negate the requirement for the “Only “yes” will be accepted to approve” &lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>from the manual steps post&lt;/a>!&lt;/p>
&lt;h2 id="build-a-thing">Build a Thing&lt;/h2>
&lt;p>Now we can build the environment – Clicking Save and Queue&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-80.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-80.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>opens this dialogue&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-81.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-81.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>where the variables can be filled in.&lt;/p>
&lt;p>The build will be queued and clicking on the build number will open the logs&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-82.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-82.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-83.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-83.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>6 minutes later the job has finished&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-84.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-84.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and the resources have been created.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-85.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-85.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>If I want to look in the logs of the job I can click on one of the steps and take a look. This is the apply step&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-87.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-87.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="do-it-again-for-another-presentation">Do it Again For Another Presentation&lt;/h2>
&lt;p>So that is good, I can create my environment as I want it. Once my presentation has finished I can delete the Resource Groups. When I need to do the presentation again, I can queue another build and change the variables&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-88.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-88.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-89.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-89.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The job will run&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-90.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-90.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and the new resource group will be created&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-91.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-91.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>all ready for my next presentation 🙂&lt;/p>
&lt;p>This is brilliant, I can set up the same solution for different repositories for different presentations (infrastructure) and recreate the above steps.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups/" target="_blank" rel="noopener"
>The next post will show how to use Azure DevOps Task Groups to use the same build steps in multiple pipelines and build an Azure Linux SQL Server VM&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/" target="_blank" rel="noopener"
>The post after that will show how to use Azure DevOps templates to use the same build steps across many projects and build pipelines and will build a simple AKS cluster&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-with-visual-studio-code/" target="_blank" rel="noopener"
>The first post showed how to build an Azure SQL Database with Terraform using VS Code&lt;/a>&lt;/p></description></item><item><title>Building Azure SQL Db with Terraform with Visual Studio Code</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-with-visual-studio-code/</link><pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/building-azure-sql-db-with-terraform-with-visual-studio-code/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2019/04/image-42.png" alt="Featured image of post Building Azure SQL Db with Terraform with Visual Studio Code" />&lt;p>I have been using &lt;a class="link" href="https://www.terraform.io/" target="_blank" rel="noopener"
>Terraform&lt;/a> for the last week or so to create some infrastructure and decided to bring that knowledge back to a problem that I and others suffer from – building environments for presentations, all for the sake of doing some learning.&lt;/p>
&lt;h2 id="what-is-terraform">What is Terraform?&lt;/h2>
&lt;p>According to the website&lt;/p>
&lt;blockquote>
&lt;p>HashiCorp Terraform enables you to safely and predictably create, change, and improve infrastructure. It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned&lt;/p>
&lt;p>&lt;a class="link" href="https://www.terraform.io/" target="_blank" rel="noopener"
>https://www.terraform.io/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>This means that I can define my infrastructure as code. If I can do that then I can reliably do the same thing again and again, at work to create environments that have the same configuration or outside of work to repeatedly build the environment I need.&lt;/p>
&lt;h2 id="building-an-azure-sql-database-with-terraform">Building an Azure SQL Database with Terraform&lt;/h2>
&lt;p>To understand how to build a thing the best place to start is the documentation &lt;a class="link" href="https://www.terraform.io/docs" target="_blank" rel="noopener"
>https://www.terraform.io/docs&lt;/a> . For an &lt;a class="link" href="https://www.terraform.io/docs/providers/azurerm/r/sql_database.html" target="_blank" rel="noopener"
>Azure SQL Db in the docs&lt;/a> you will find a block of code that looks like this&lt;/p>
&lt;pre>&lt;code> resource &amp;quot;azurerm_resource_group&amp;quot; &amp;quot;test&amp;quot; {
name = &amp;quot;acceptanceTestResourceGroup1&amp;quot;
location = &amp;quot;West US&amp;quot;
}
resource &amp;quot;azurerm_sql_server&amp;quot; &amp;quot;test&amp;quot; {
name = &amp;quot;mysqlserver&amp;quot;
resource_group_name = &amp;quot;${azurerm_resource_group.test.name}&amp;quot;
location = &amp;quot;West US&amp;quot;
version = &amp;quot;12.0&amp;quot;
administrator_login = &amp;quot;4dm1n157r470r&amp;quot;
administrator_login_password = &amp;quot;4-v3ry-53cr37-p455w0rd&amp;quot;
}
resource &amp;quot;azurerm_sql_database&amp;quot; &amp;quot;test&amp;quot; {
name = &amp;quot;mysqldatabase&amp;quot;
resource_group_name = &amp;quot;${azurerm_resource_group.test.name}&amp;quot;
location = &amp;quot;West US&amp;quot;
server_name = &amp;quot;${azurerm_sql_server.test.name}&amp;quot;
tags = {
environment = &amp;quot;production&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;p>If you read the code, you can see that there are key value pairs defining information about the resource that is being created. Anything inside a ${} is a dynamic reference. So&lt;/p>
&lt;p>resource_group_name = &amp;ldquo;${azurerm_resource_group.test.name}&amp;rdquo;
refers to the name property in the azure_resource_group block called test (or the name of the resource group 🙂 )&lt;/p>
&lt;h2 id="infrastructure-as-code">Infrastructure As Code&lt;/h2>
&lt;p>So I can put that code into a file (name it main.tf) and alter it with the values and “run Terraform” and what I want will be created. Lets take it a step further though because I want to be able to reuse this code. Instead of hard-coding all of the values I am going to use variables. I can do this by creating another file called variables.tf which looks like&lt;/p>
&lt;pre>&lt;code> variable &amp;quot;presentation&amp;quot; {
description = &amp;quot;The name of the presentation - used for tagging Azure resources so I know what they belong to&amp;quot;
default = &amp;quot;dataindevon&amp;quot;
}
variable &amp;quot;ResourceGroupName&amp;quot; {
description = &amp;quot;The Resource Group Name&amp;quot;
default = &amp;quot;beardrules&amp;quot;
}
variable &amp;quot;location&amp;quot; {
description = &amp;quot;The Azure Region in which the resources in this example should exist&amp;quot;
default = &amp;quot;uksouth&amp;quot;
}
variable &amp;quot;SqlServerName&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server to be created or to have the database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;jeremy&amp;quot;
}
variable &amp;quot;SQLServerAdminUser&amp;quot; {
description = &amp;quot;The name of the Azure SQL Server Admin user for the Azure SQL Database&amp;quot;
default = &amp;quot;Beard&amp;quot;
}
variable &amp;quot;SQLServerAdminPassword&amp;quot; {
description = &amp;quot;The Azure SQL Database users password&amp;quot;
default = &amp;quot;JonathanlovesR3ge%&amp;quot;
}
variable &amp;quot;SqlDatabaseName&amp;quot; {
description = &amp;quot;The name of the Azure SQL database on - needs to be unique, lowercase between 3 and 24 characters including the prefix&amp;quot;
default = &amp;quot;jsdb&amp;quot;
}
variable &amp;quot;Edition&amp;quot; {
description = &amp;quot;The Edition of the Database - Basic, Standard, Premium, or DataWarehouse&amp;quot;
default = &amp;quot;Standard&amp;quot;
}
variable &amp;quot;ServiceObjective&amp;quot; {
description = &amp;quot;The Service Tier S0, S1, S2, S3, P1, P2, P4, P6, P11 and ElasticPool&amp;quot;
default = &amp;quot;S0&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>and my main.tf then looks like this.&lt;/p>
&lt;pre>&lt;code>provider &amp;quot;azurerm&amp;quot; {
version = &amp;quot;=1.24.0&amp;quot;
}
resource &amp;quot;azurerm_resource_group&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.ResourceGroupName}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_server&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlServerName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_resource_group. presentation.name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
version = &amp;quot;12.0&amp;quot;
administrator_login = &amp;quot;${var.SQLServerAdminUser}&amp;quot;
administrator_login_password = &amp;quot;${var.SQLServerAdminPassword} &amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
resource &amp;quot;azurerm_sql_database&amp;quot; &amp;quot;presentation&amp;quot; {
name = &amp;quot;${var.SqlDatabaseName}&amp;quot;
resource_group_name = &amp;quot;${azurerm_sql_server.presentation. resource_group_name}&amp;quot;
location = &amp;quot;${var.location}&amp;quot;
server_name = &amp;quot;${azurerm_sql_server.presentation. name}&amp;quot;
edition = &amp;quot;${var.Edition}&amp;quot;
requested_service_objective_name = &amp;quot;${var.ServiceObjective}&amp;quot;
tags = {
environment = &amp;quot;${var.presentation}&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;p>You can find these files in my &lt;a class="link" href="https://github.com/SQLDBAWithABeard/Presentations-AzureSQLDB/tree/master/Manual" target="_blank" rel="noopener"
>GitHub Repository&lt;/a> here.&lt;/p>
&lt;h2 id="alright--deploy-something">Alright – deploy something&lt;/h2>
&lt;p>To deploy the code that I have written I need to download Terraform from &lt;a class="link" href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener"
>https://www.terraform.io/downloads.html&lt;/a> and then extract the exe to a folder in my PATH. (I chose C:\Windows). Then in Visual Studio Code I installed two extensions The &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=mauve.terraform" target="_blank" rel="noopener"
>Terraform Extension by Mikael Olenfalk&lt;/a> which enables syntax highlighting and auto-completion for the tf files and the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureterraform" target="_blank" rel="noopener"
>Azure Terraform&lt;/a> extension. You will need also need &lt;a class="link" href="https://nodejs.org/en/" target="_blank" rel="noopener"
>Node.js from here&lt;/a>.&lt;/p>
&lt;p>With those in place I navigated to the directory holding my files in Visual Studio Code and pressed F1 and started typing azure terraform and chose Azure Terraform Init&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-39.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-39.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I was then prompted to use Cloud Shell and a browser opened to login. Once I had logged in I waited until I saw this&lt;/p>
&lt;p>&lt;a class="link" href="blob:https://blog.robsewell.com/787b935b-930a-45c4-ac43-18a18193e01f" >&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-40.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>I press F1 again and this time choose Azure Terraform plan. This is going to show me what Terraform is going to do if it applies this configuration.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-41.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-41.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can see the what is going to be created. It is going to create 3 things&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-42.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-42.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Once you have checked that the plan is what you want, press F1 again and choose Azure Terraform Apply&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-43.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-43.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You are then asked to confirm that this is what you want. Only “yes” will be accepted. Then you will see the infrastructure being created&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-44.png"
loading="lazy"
>&lt;/p>
&lt;p>and a minute later&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-45.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-45.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and Jeremy exists in the beardrules resource group&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-49.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Then once I have finished with using the sqlinstance. I can press F1 again and choose Azure Terraform Destroy. Again there is a confirmation required.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/04/image-47.png?ssl=1" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-47.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and you will see the progress for 46 seconds&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/04/image-50.png"
loading="lazy"
>&lt;/p>
&lt;p>and all of the resources have gone.&lt;/p>
&lt;p>Thats a good start. This enables me to create resources quickly and easily and keep the configuration for them safely in source control and easy to use.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/building-azure-sql-db-with-terraform-using-azure-devops/" target="_blank" rel="noopener"
>In my next post I will create an Azure DevOps pipeline to deploy an AZure SQL Db withTerraform&lt;/a>.&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-the-same-azure-devops-build-steps-for-terraform-with-different-pipelines-with-task-groups/" target="_blank" rel="noopener"
>The post after will show how to use Azure DevOps Task Groups to use the same build steps in multiple pipelines and build an Azure Linux SQL Server VM&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/using-azure-devops-build-pipeline-templates-with-terraform-to-build-an-aks-cluster/" target="_blank" rel="noopener"
>The post after that will show how to use Azure DevOps templates to use the same build steps across many projects and build pipelines and will build a simple AKS cluster&lt;/a>&lt;/p></description></item></channel></rss>