<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>help on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/help/</link><description>Recent content in help on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/help/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Code – Automatic Dynamic PowerShell Help</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/vs-code-automatic-dynamic-powershell-help/</link><pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/vs-code-automatic-dynamic-powershell-help/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>PowerShell Function – Validating a Parameter Depending On A Previous Parameter’s Value</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/powershell-function-validating-a-parameter-depending-on-a-previous-parameters-value/</link><pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/powershell-function-validating-a-parameter-depending-on-a-previous-parameters-value/</guid><description>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/01-more-help.png" alt="Featured image of post PowerShell Function – Validating a Parameter Depending On A Previous Parameter’s Value" />&lt;p>I was chatting on the &lt;a class="link" href="https://sqlps.io/slack" target="_blank" rel="noopener"
>SQL Community Slack&lt;/a> with my friend Sander Stad &lt;a class="link" href="http://www.sqlstad.nl/" target="_blank" rel="noopener"
>b&lt;/a> | &lt;a class="link" href="https://twitter.com/sqlstad" target="_blank" rel="noopener"
>t&lt;/a> about some functions he is writing for the amazing PowerShell SQL Server Community module &lt;a class="link" href="https://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a>. He was asking my opinion as to how to enable user choice or options for Agent Schedules and I said that he should validate the input of the parameters. He said that was difficult as if the parameter was Weekly the frequency values required would be different from if the parameter was Daily or Monthly. That’s ok, I said, you can still validate the parameter.&lt;/p>
&lt;p>You can read more about Parameters either online &lt;a class="link" href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_parameters" target="_blank" rel="noopener"
>here&lt;/a> or &lt;a class="link" href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_functions_advanced_parameters" target="_blank" rel="noopener"
>here&lt;/a> or by running&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Get-Help About_Parameters
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get-Help About_Functions_Parameters
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can also find more help information with&lt;/p>
&lt;p>&lt;code>Get-Help About_*Parameters*&lt;/code>&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/01-more-help.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/01-more-help.png"
loading="lazy"
alt="01 more help.PNG"
>&lt;/a>&lt;/p>
&lt;p>This is not a post about using Parameters, &lt;a class="link" href="https://www.google.co.uk/search?q=powershell&amp;#43;about&amp;#43;paramters&amp;amp;ie=&amp;amp;oe=#safe=strict&amp;amp;q=powershell&amp;#43;parameters&amp;amp;spf=370" target="_blank" rel="noopener"
>google for those&lt;/a> but this is what I showed him.&lt;/p>
&lt;p>Lets create a simple function that accepts 2 parameters Word and Number&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> function Test-validation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Param
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [string]$Word,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [int]$Number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Return &amp;#34;$Word and $Number&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can run it with any parameters&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/02-any-parameters.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/02-any-parameters.png"
loading="lazy"
alt="02 any parameters"
>&lt;/a>&lt;/p>
&lt;p>If we wanted to restrict the Word parameter to only accept Sun, Moon or Earth we can use the &lt;a class="link" href="https://msdn.microsoft.com/en-us/library/ms714434%28v=vs.85%29.aspx" target="_blank" rel="noopener"
>ValidateSetAttribute&lt;/a> as follows&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> function Test-validation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Param
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [ValidateSet(&amp;#34;sun&amp;#34;, &amp;#34;moon&amp;#34;, &amp;#34;earth&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [string]$Word,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [int]$Number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Return &amp;#34;$Word and $Number&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now if we try and set a value for the $Word parameter that isn’t sun moon or earth then we get an error&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/03-parameter-error.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/03-parameter-error.png"
loading="lazy"
alt="03 parameter error.PNG"
>&lt;/a>&lt;/p>
&lt;p>and it tells us that the reason for the error is that TheBeard! does not belong to the set sun, moon, earth.&lt;/p>
&lt;p>But what Sander wanted was to validate the value of the second parameter depending on the value of the first one. So lets say we wanted&lt;/p>
&lt;ul>
&lt;li>If word is sun, number must be 1 or 2&lt;/li>
&lt;li>If word is moon, number must be 3 or 4&lt;/li>
&lt;li>If word is earth, number must be 5 or 6&lt;/li>
&lt;/ul>
&lt;p>We can use the &lt;a class="link" href="https://msdn.microsoft.com/en-us/library/system.management.automation.validatescriptattribute%28v=vs.85%29.aspx" target="_blank" rel="noopener"
>ValidateScriptAttribute&lt;/a>  to do this. This requires a script block which returns True or False. You can access the current parameter with &lt;code>$_&lt;/code> so we can use a script block like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if($Word -eq &amp;#39;Sun&amp;#39;){$_ -eq 1 -or $_ -eq 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif($Word -eq &amp;#39;Moon&amp;#39;){$_ -eq 3 -or $_ -eq 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif($Word -eq &amp;#39;earth&amp;#39;){$_ -eq 5 -or $_ -eq 6}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The function now looks like&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function Test-validation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Param
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [ValidateSet(&amp;#34;sun&amp;#34;, &amp;#34;moon&amp;#34;, &amp;#34;earth&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [string]$Word,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [ValidateScript({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            if($Word -eq &amp;#39;Sun&amp;#39;){$_ -eq 1 -or $_ -eq 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            elseif($Word -eq &amp;#39;Moon&amp;#39;){$_ -eq 3 -or $_ -eq 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            elseif($Word -eq &amp;#39;earth&amp;#39;){$_ -eq 5 -or $_ -eq 6}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        })]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [int]$Number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Return &amp;#34;$Word and $Number&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It will still fail if we use the wrong “Word” in the same way but now if we enter earth and 7 we get this&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/04-parameter-error.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/04-parameter-error.png"
loading="lazy"
alt="04 parameter error.PNG"
>&lt;/a>&lt;/p>
&lt;p>But if we enter sun and 1 or moon and 3 or earth and 5 all is well&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/05-working.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/05-working.png"
loading="lazy"
alt="05 working"
>&lt;/a>&lt;/p>
&lt;p>I would add one more thing. We should always write PowerShell functions that are easy for our users to self-help. Of course, this means write good help for the function. here is a great place to start from June Blender&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/06-june.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/06-june.png"
loading="lazy"
alt="06 June.PNG"
>&lt;/a>&lt;/p>
&lt;p>In this example, the error message&lt;/p>
&lt;blockquote>
&lt;p>Test-validation : Cannot validate argument on parameter ‘number’. The ”&lt;br>
if($word -eq ‘Sun’){$_ -eq 1 -or $_ -eq 2}&lt;br>
elseif($word -eq ‘Moon’){$_ -eq 3 -or $_ -eq 4}&lt;br>
elseif($word -eq ‘earth’){$_ -eq 5 -or $_ -eq 6}&lt;br>
” validation script for the argument with value “7” did not return a result of True. Determine why the validation script failed, and then try the&lt;br>
command again.&lt;br>
At line:1 char:39&lt;/p>
&lt;ul>
&lt;li>Test-validation -Word “earth” -number 007&lt;br>
+                                       ~~~&lt;/li>
&lt;li>CategoryInfo          : InvalidData: (:) [Test-validation], ParameterBindingValidationException&lt;/li>
&lt;li>FullyQualifiedErrorId : ParameterArgumentValidationError,Test-validation&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>is not obvious to a none-coder so we could make it easier. As we are passing in a script block we can just add a comment like this. I added a spare line above and below to make it stand out a little more&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function Test-validation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    Param
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [ValidateSet(&amp;#34;sun&amp;#34;, &amp;#34;moon&amp;#34;, &amp;#34;earth&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [string]$Word,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [ValidateScript({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            # Sun Accepts 1 or 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Moon Accepts 3 or 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # Earth Accepts 5 or 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            #
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            if($Word -eq &amp;#39;Sun&amp;#39;){$_ -eq 1 -or $_ -eq 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            elseif($Word -eq &amp;#39;Moon&amp;#39;){$_ -eq 3 -or $_ -eq 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">            elseif($Word -eq &amp;#39;earth&amp;#39;){$_ -eq 5 -or $_ -eq 6}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        })]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">        [int]$Number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Return &amp;#34;$Word and $Number&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now if you enter the wrong parameter you get this&lt;/p>
&lt;p>&lt;a class="link" href="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/07-more-help.png" >&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/assets/uploads/2017/04/07-more-help.png"
loading="lazy"
alt="07 more help.PNG"
>&lt;/a>&lt;/p>
&lt;p>which I think makes it a little more obvious&lt;/p></description></item><item><title>PowerShell Function – Validating a Parameter Depending On A Previous Parameter’s Value</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/powershell-function-validating-a-parameter-depending-on-a-previous-parameters-value/</link><pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/powershell-function-validating-a-parameter-depending-on-a-previous-parameters-value/</guid><description>&lt;!-- raw HTML omitted --></description></item><item><title>Use Twitter to get #PowerShell help</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/use-twitter-to-get-#powershell-help/</link><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/use-twitter-to-get-#powershell-help/</guid><description>&lt;p>A quick post today just to add some weight to something that Mike Fal &lt;a class="link" href="http://www.mikefal.net/" target="_blank" rel="noopener"
>b&lt;/a> | &lt;a class="link" href="https://twitter.com/Mike_Fal" target="_blank" rel="noopener"
>t&lt;/a> has kicked off. The &lt;a class="link" href="https://twitter.com/hashtag/sqlhelp" target="_blank" rel="noopener"
>#SQLHelp hashtag&lt;/a> is well known and well used with in the SQL world. It is a fantastic resource and one that I recommend to all SQL folk I meet who are not aware of it. &lt;a class="link" href="https://www.brentozar.com/archive/2009/12/i-need-sqlhelp/" target="_blank" rel="noopener"
>Heres how it started&lt;/a>&lt;/p>
&lt;p>Mike has suggested that there should be a similar resource for PowerShell questions &lt;a class="link" href="https://twitter.com/search?q=%23PoShHelp" target="_blank" rel="noopener"
>#PoSHHelp&lt;/a>. We want to create a useful and positive place for people to go with their PowerShell queries and some good folks like Mike,  &lt;a class="link" href="http://t.co/NfvkfJXMjp" target="_blank" rel="noopener"
>Shawn Melton&lt;/a>(&lt;a class="link" href="https://twitter.com/wsmelton" target="_blank" rel="noopener"
>@wsmelton&lt;/a>), &lt;a class="link" href="http://t.co/K8jsx6WHcc" target="_blank" rel="noopener"
>Adam Bertram&lt;/a>(&lt;a class="link" href="https://twitter.com/adbertram" target="_blank" rel="noopener"
>@adbertram&lt;/a>), &lt;a class="link" href="http://t.co/U5LLtwWDPI" target="_blank" rel="noopener"
>Derik Hammer&lt;/a>(&lt;a class="link" href="https://twitter.com/SQLHammer" target="_blank" rel="noopener"
>@SQLHammer&lt;/a>), &lt;a class="link" href="http://learn-PowerShell.net/" target="_blank" rel="noopener"
>Boe Prox&lt;/a>(&lt;a class="link" href="https://twitter.com/proxb" target="_blank" rel="noopener"
>@proxb&lt;/a>), myself  and others will be looking for your PowerShell problems and try to assist you over Twitter with the same care and grace as Sqlhelp.&lt;/p>
&lt;p>As with Sqlhelp we would like there to be a few rules that we all can follow to ensure that this remains a brilliant resource. Mike has suggested the following&lt;/p>
&lt;ol>
&lt;li>Questions should fit into 140 characters.&lt;/li>
&lt;li>If they don’t, put your question and information on another site (like &lt;a class="link" href="http://serverfault.com/" target="_blank" rel="noopener"
>ServerFault.com&lt;/a>) and link to it.&lt;/li>
&lt;li>DO NOT SPAM THE HASH TAG. This is important, because in order to make it useful it needs to be kept clean. Don’t use it to advertise your blog posts or articles, but only for Q&amp;amp;A.&lt;/li>
&lt;li>Don’t be a dick, a.k.a. &lt;a class="link" href="http://knowyourmeme.com/memes/wheatons-law" target="_blank" rel="noopener"
>Wheaton’s Law&lt;/a>. It’s all too easy to let the anonymity of the internet get the better of us. Be polite and respectful to those using and accidentally mis-using the hash tag.&lt;/li>
&lt;/ol>
&lt;p>I notice that &lt;a class="link" href="http://sqlvariant.com/2010/07/please-join-us-for-poshhelp/" target="_blank" rel="noopener"
>Aaron Nelson had already suggested this a few years ago&lt;/a> but it seems like it has fallen by the wayside. I would like to see this grow for all PowerShell folk so I ask you all to do two things.&lt;/p>
&lt;p>Firstly, please add #PoSHHelp to your Tweetdeck column list or pin it to Tweetium (like I have) If you see a question you can help with then jump in and give your answer and help the community.&lt;/p>
&lt;p>Secondly, let people know, if you see or hear a question about PowerShell then advise them to make use of the hashtag. If you blog about PowerShell then write a quick blog post like this one and let your readers know.&lt;/p>
&lt;p>Pass on the word&lt;/p>
&lt;p>&lt;img src="https://sqldbawithabeard.github.io/blogrobsewell/blogrobsewell/images/nRhfnZ0.png"
loading="lazy"
>&lt;/p></description></item></channel></rss>