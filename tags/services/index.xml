<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>services on Rob Sewell (aka SQL DBA With A Beard)</title><link>https://sqldbawithabeard.github.io/blogrobsewell/tags/services/</link><description>Recent content in services on Rob Sewell (aka SQL DBA With A Beard)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 03 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://sqldbawithabeard.github.io/blogrobsewell/tags/services/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting SQL Services, Starting, Stopping and Restarting them with dbatools</title><link>https://sqldbawithabeard.github.io/blogrobsewell/blog/getting-sql-services-starting-stopping-and-restarting-them-with-dbatools/</link><pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate><guid>https://sqldbawithabeard.github.io/blogrobsewell/blog/getting-sql-services-starting-stopping-and-restarting-them-with-dbatools/</guid><description>&lt;p>There was a question in the &lt;a class="link" href="https://sqlcommunity.slack.com/#dbatools" target="_blank" rel="noopener"
>#dbatools slack channel &lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/dbatools-question.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/dbatools-question.png"
loading="lazy"
alt="dbatools question"
>&lt;/a>&lt;/p>
&lt;h3 id="getting-dbatools">Getting dbatools&lt;/h3>
&lt;p>dbatools enables you to administer SQL Server with PowerShell. To get it simply open PowerShell run&lt;/p>
&lt;p>Install-Module dbatools&lt;/p>
&lt;p>You can find more details on &lt;a class="link" href="http://dbatools.io/install" target="_blank" rel="noopener"
>the web-site&lt;/a>&lt;/p>
&lt;h3 id="finding-the-command">Finding the Command&lt;/h3>
&lt;p>To find a command you can use the dbatools command &lt;a class="link" href="https://docs.dbatools.io/#Find-DbaCommand" target="_blank" rel="noopener"
>Find-DbaCommand&lt;/a>&lt;br>
For commands for service run&lt;/p>
&lt;p>Find-DbaCommand Service&lt;/p>
&lt;p>There are a whole bundle returned&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/find-services.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/find-services.png"
loading="lazy"
alt="find services.png"
>&lt;/a>&lt;/p>
&lt;p>This is how you can find any dbatools command. There is also a -Tag parameter on Find-DbaCommand.&lt;/p>
&lt;p>Find-DbaCommand -Tag Service&lt;/p>
&lt;p>This returns&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/find-services-tag.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/find-services-tag.png"
loading="lazy"
alt="find services tag.png"
>&lt;/a>&lt;/p>
&lt;h3 id="how-to-use-any-powershell-command">How to use any PowerShell command&lt;/h3>
&lt;p>Always always start with Get-Help&lt;/p>
&lt;p>Get-Help Get-DbaService -Detailed&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/get-help.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/get-help.png"
loading="lazy"
alt="get help.png"
>&lt;/a>&lt;/p>
&lt;p>This will show you all the information about the command including examples 🙂&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/help-examples.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/help-examples.png"
loading="lazy"
alt="help examples.png"
>&lt;/a>&lt;/p>
&lt;p>All of these commands below require that the account running the PowerShell is a Local Admin on the host.&lt;/p>
&lt;h3 id="one-host-many-hosts">One Host Many Hosts&lt;/h3>
&lt;p>Now I have used just one host for all of the examples on this page. Do not be fooled, you can always use an array of hosts wherever I have $ComputerName you can set it to as many hosts as you like&lt;/p>
&lt;p>$ComputerName = &amp;lsquo;SQL0&amp;rsquo;,&amp;lsquo;SQL1&amp;rsquo;&lt;/p>
&lt;p>You can even get those names form a database, Excel sheet, CMS.&lt;/p>
&lt;h3 id="getting-the-services">Getting the Services&lt;/h3>
&lt;p>So to get the services on a machine run&lt;/p>
&lt;p>$ComputerName = &amp;lsquo;Name of Computer&amp;rsquo;
Get-DbaService -ComputerName $ComputerName&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/getting-servies-1.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/getting-servies-1.png"
loading="lazy"
alt="getting servies 1.png"
>&lt;/a>&lt;/p>
&lt;p>You can output into a table format.&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName | Format-Table&lt;/p>
&lt;p>I will use the alias ft for this in some of the examples, that is fine for the command line but use the full command name in any code that you write that other people use&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/services-table.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/services-table.png"
loading="lazy"
alt="services table.png"
>&lt;/a>&lt;/p>
&lt;p>You have an object returned so you can output to anything if you want – CSV, JSON, text file, email, azure storage, database, the world is your oyster.&lt;/p>
&lt;h3 id="getting-the-services-for-one-instance">Getting the Services for one instance&lt;/h3>
&lt;p>The &lt;a class="link" href="https://docs.dbatools.io/#Get-DbaService" target="_blank" rel="noopener"
>Get-DbaService&lt;/a> command has a number of parameters. There is an InstanceName parameter enabling you to get only the services for one instance. If we just want the default instance services&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -InstanceName MSSQLSERVER| Format-Table&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/default-instances.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/default-instances.png"
loading="lazy"
alt="default instances.png"
>&lt;/a>&lt;/p>
&lt;p>Just the MIRROR instance services&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -InstanceName MIRROR| Format-Table&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/mirror-instances.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/mirror-instances.png"
loading="lazy"
alt="mirror instances.png"
>&lt;/a>&lt;/p>
&lt;h3 id="getting-just-the-engine-or-agent-services">Getting just the Engine or Agent services&lt;/h3>
&lt;p>You can also use the -Type parameter to get only services of a particular type. You can get one of the following: “Agent”,”Browser”,”Engine”,”FullText”,”SSAS”,”SSIS”,”SSRS”, “PolyBase”&lt;/p>
&lt;p>So to get only the Agent Services&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -Type Agent&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/agent-services.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/agent-services.png"
loading="lazy"
alt="agent services.png"
>&lt;/a>&lt;/p>
&lt;p>You can combine the InstanceName and the Type parameters to get say only the default instance engine service&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -InstanceName MSSQLSERVER -Type Engine&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/default-engine-service.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/default-engine-service.png"
loading="lazy"
alt="default engine service.png"
>&lt;/a>&lt;/p>
&lt;h3 id="starting-and-stopping-and-restarting-services">Starting and stopping and restarting services&lt;/h3>
&lt;p>You can use &lt;a class="link" href="https://docs.dbatools.io/#Start-DbaService" target="_blank" rel="noopener"
>Start-DbaService&lt;/a> and &lt;a class="link" href="https://docs.dbatools.io/#Stop-DbaService" target="_blank" rel="noopener"
>Stop-DbaService&lt;/a> to start and stop the services. They each have ComputerName, InstanceName and Type parameters like Get-DbaService.&lt;/p>
&lt;p>So if after running&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName | Format-Table&lt;/p>
&lt;p>you find that all services are stopped&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/all-stopped.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/all-stopped.png"
loading="lazy"
alt="all stopped.png"
>&lt;/a>&lt;/p>
&lt;h3 id="start-all-the-services">Start All the Services&lt;/h3>
&lt;p>You can run&lt;/p>
&lt;p>Start-DbaService -ComputerName $ComputerName | Format-Table&lt;/p>
&lt;p>and start them all&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/start-them-all.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/start-them-all.png"
loading="lazy"
alt="start them all.png"
>&lt;/a>&lt;/p>
&lt;p>The full text service was started with the engine service which is why it gave a warning. You can see this if you have all of the services stopped and just want to start the engine services with the type parameter.&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName | Format-Table
Start-DbaService -ComputerName $ComputerName -Type Engine
Get-DbaService -ComputerName $ComputerName | Format-Table&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/all-stopped-start-engine.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/all-stopped-start-engine.png"
loading="lazy"
alt="all stopped - start engine.png"
>&lt;/a>&lt;/p>
&lt;p>If you just want to start the Agent services, you can use&lt;/p>
&lt;p>Start-DbaService -ComputerName $ComputerName -Type Agent&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/start-agent.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/start-agent.png"
loading="lazy"
alt="start agent.png"
>&lt;/a>&lt;/p>
&lt;p>You can start just the services for one instance&lt;/p>
&lt;p>Start-DbaService -ComputerName $ComputerName -InstanceName MIRROR&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/start-instance-services.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/start-instance-services.png"
loading="lazy"
alt="start instance services.png"
>&lt;/a>&lt;/p>
&lt;h3 id="stopping-the-services">Stopping the services&lt;/h3>
&lt;p>Stopping the services works in the same way. Lets stop the MIRROR instance services we have just started. This will stop the services for an instance&lt;/p>
&lt;p>Stop-DbaService -ComputerName $ComputerName -InstanceName MIRROR&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/stopping-instance-services.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/stopping-instance-services.png"
loading="lazy"
alt="stopping instance services.png"
>&lt;/a>&lt;/p>
&lt;p>We can stop them by type as well, although this will show an extra requirement. If we start our MIRROR instance services again and then try to stop just the engine type.&lt;/p>
&lt;p>Start-DbaService -ComputerName $ComputerName -InstanceName MIRROR | ft
Stop-DbaService -ComputerName $ComputerName -Type Engine&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/cant-stop.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/cant-stop.png"
loading="lazy"
alt="cant stop.png"
>&lt;/a>&lt;/p>
&lt;p>You will get a warning due to the dependant services&lt;/p>
&lt;blockquote>
&lt;p>WARNING: [10:31:02][Update-ServiceStatus] (MSSQL$MIRROR on SQL0) The attempt to stop the service returned the following error: The service cannot be stopped because other services that are running are dependent on it.&lt;br>
WARNING: [10:31:02][Update-ServiceStatus] (MSSQL$MIRROR on SQL0) Run the command with ‘-Force’ switch to force the restart of a dependent SQL Agent&lt;/p>
&lt;/blockquote>
&lt;p>So all you have to do is use the force Luke (or whatever your name is!)&lt;/p>
&lt;p>Stop-DbaService -ComputerName $ComputerName -Type Engine -Force&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/Use-the-force.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/Use-the-force.png"
loading="lazy"
alt="Use the force.png"
>&lt;/a>&lt;/p>
&lt;p>You can also stop the services for an entire host, again you will need the Force parameter.&lt;/p>
&lt;p>Start-DbaService -ComputerName $ComputerName |ft
Stop-DbaService -ComputerName $ComputerName -Force | ft&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/stop-all-of-them.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/stop-all-of-them.png"
loading="lazy"
alt="stop all of them.png"
>&lt;/a>&lt;/p>
&lt;h3 id="restarting-services">Restarting Services&lt;/h3>
&lt;p>It will come as no surprise by now to learn that &lt;a class="link" href="https://docs.dbatools.io/#Restart-DbaService" target="_blank" rel="noopener"
>Restart-DbaService&lt;/a> follows the same pattern. It also has ComputerName, InstanceName and Type parameters like Get-DbaService, Start-DbaService and Stop-DbaService (Consistency is great, It’s one of the things that is being worked on towards 1.0 as you can see in the &lt;a class="link" href="https://sqlcollaborative.github.io/boh.html" target="_blank" rel="noopener"
>Bill of Health&lt;/a>)&lt;/p>
&lt;p>Again you will need the -Force for dependant services, you can restart all of the services on a host with&lt;/p>
&lt;p>Restart-DbaService -ComputerName $ComputerName -Force&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/restart-tehm-all.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/restart-tehm-all.png"
loading="lazy"
alt="restart tehm all.png"
>&lt;/a>&lt;/p>
&lt;p>or just the services for an instance&lt;/p>
&lt;p>Restart-DbaService -ComputerName $ComputerName -InstanceName MIRROR -Force&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/restart-instance.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/restart-instance.png"
loading="lazy"
alt="restart instance.png"
>&lt;/a>&lt;/p>
&lt;p>or just the Agent Services&lt;/p>
&lt;p>Restart-DbaService -ComputerName $ComputerName -Type Agent&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/restart-agent.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/restart-agent.png"
loading="lazy"
alt="restart agent.png"
>&lt;/a>&lt;/p>
&lt;h3 id="doing-a-bit-of-coding">Doing a bit of coding&lt;/h3>
&lt;p>Now none of that answers @g-kannan’s question. Restarting only services with a certain service account.&lt;/p>
&lt;p>With PowerShell you can pipe commands together so that the results of the first command are piped into the second. So we can get all of the engine services on a host for an instance with Get-DbaService and start them with Start-DbaService like this&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -Type Engine | Start-DbaService&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/start.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/start.png"
loading="lazy"
alt="start.png"
>&lt;/a>&lt;/p>
&lt;p>or get all of the engine services for an instance on a host and stop them&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -Type Engine  -InstanceName Mirror| Stop-DbaService&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/stop-one-isntance.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/stop-one-isntance.png"
loading="lazy"
alt="stop one isntance.png"
>&lt;/a>&lt;/p>
&lt;p>or maybe you want to get all of the service that have stopped&lt;/p>
&lt;p>(Get-DbaService -ComputerName $ComputerName -Type Engine).Where{$_.State -eq &amp;lsquo;Stopped&amp;rsquo;}&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/stopped-services.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/stopped-services.png"
loading="lazy"
alt="stopped services.png"
>&lt;/a>&lt;/p>
&lt;p>You can do the same thing with syntax that may make more sense to you if you are used to T-SQL as follows&lt;/p>
&lt;p>(Get-DbaService -ComputerName $ComputerName -Type Engine) | Where State -eq &amp;lsquo;Stopped&amp;rsquo;&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/T-SQL-syntax-powershell.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/T-SQL-syntax-powershell.png"
loading="lazy"
alt="T SQL syntax powershell.png"
>&lt;/a>&lt;/p>
&lt;p>and then start only those services you could do&lt;/p>
&lt;p>(Get-DbaService -ComputerName $ComputerName -Type Engine) | Where State -eq &amp;lsquo;Stopped&amp;rsquo; | Start-DbaService&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/start-the-stopped-ones.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/start-the-stopped-ones.png"
loading="lazy"
alt="start the stopped ones.png"
>&lt;/a>&lt;/p>
&lt;p>(note – you would just use Start-DbaService in this case as it wont start services that are already started!)&lt;/p>
&lt;p># Stop just one of the engine services
Stop-DbaService -ComputerName $ComputerName -InstanceName MIRROR -Type Engine
# Get the engine services
Get-DbaService -ComputerName $ComputerName -Type Engine
# This will only start the one engine service that is stopped
Start-DbaService -ComputerName $ComputerName -Type Engine&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/only-one-service.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/only-one-service.png"
loading="lazy"
alt="only one service.png"
>&lt;/a>&lt;/p>
&lt;h3 id="come-on-rob-answer-the-question">Come On Rob! Answer the question!&lt;/h3>
&lt;p>So now that you know a lot more about these commands, you can restart only the services using a particular service account by using Get-DbaService to get the services&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -Type Engine | Where StartName -eq &amp;rsquo;thebeard\sqlsvc&amp;rsquo;&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/services-by-start-name.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/services-by-start-name.png"
loading="lazy"
alt="services by start name.png"
>&lt;/a>&lt;/p>
&lt;p>and then once you know that you have the right ‘query’ you can pipe that to Restart-DbaService (Like making sure your SELECT query returns the correct rows for your WHERE clause before running the DELETE or UPDATE)&lt;/p>
&lt;p>Get-DbaService -ComputerName $ComputerName -Type Engine | Where StartName -eq &amp;rsquo;thebeard\sqlsvc&amp;rsquo; | Restart-DbaService&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/12/restarting-only-one.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/12/restarting-only-one.png"
loading="lazy"
alt="restarting only one.png"
>&lt;/a>&lt;/p>
&lt;p>Happy Automating !&lt;/p></description></item></channel></rss>